[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Experiments",
    "section": "",
    "text": "Preface\nThis book contains all experiment protocols for my research on appointment scheduling.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html",
    "href": "xgboost-pairwise-ranking.html",
    "title": "2  XGBoost model for pairwise ranking",
    "section": "",
    "text": "2.1 Objective\nObjective: Testing the performance of an XGBoost model trained for ranking pairwise schedules.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#background",
    "href": "xgboost-pairwise-ranking.html#background",
    "title": "2  XGBoost model for pairwise ranking",
    "section": "2.2 Background",
    "text": "2.2 Background\nBackground Information: To find optimal solutions for appointment scheduling problems one approach is to create local search neighborhoods and evaluate each schedule. A better search method either (1) - creates smaller search neighborhoods or (2) - evaluates faster. In this experiment we develop an Machine Learning model using XGBoost that can evaluate two neighboring schedules and rank them according to preference.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#hypothesis",
    "href": "xgboost-pairwise-ranking.html#hypothesis",
    "title": "2  XGBoost model for pairwise ranking",
    "section": "2.3 Hypothesis",
    "text": "2.3 Hypothesis\nHypothesis: An XGBoost ranking model outperforms simple evaluation of each individual element of the pair.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#methodology",
    "href": "xgboost-pairwise-ranking.html#methodology",
    "title": "2  XGBoost model for pairwise ranking",
    "section": "2.4 Methodology",
    "text": "2.4 Methodology\n\n2.4.1 Tools and Materials\nTools and Materials: List all tools, software, and materials needed for the experiment.\n\nimport time\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, GridSearchCV\nfrom sklearn.base import clone\nimport xgboost as xgb\nfrom xgboost.callback import TrainingCallback\nimport plotly.graph_objects as go\n\n\n\n2.4.2 Experimental Design\nDesign: To compare an XGBoost Machine Learning model with a simple evaluation of each individual element of the pair, we will use a pairwise ranking approach. The objective is to rank two neighboring schedules according to preference.\nWe will create a random set of pairs of neighboring schedules with \\(N = 12\\) patients and \\(\\ T = 18\\) intervals of length \\(d = 5\\).\nA neighborhood consists of all schedules that differ by one patient only. Eg: ([2,1,1], [1,1,2]) are neighbors and ([2,1,1], [1,0,3]) are not.\nService times will have a discrete distribution. The probability of a scheduled patient not showing up will be \\(q = 0.20\\).\nThe objective function will be the total waiting time of all patients. The model will be trained to predict which of the two neighboring schedules has the lowest objective value. The prediction time will be recorded. Then the same schedules will be evaluated by computing the objective value and then ranked.\n\nN = 12\nT = 18\nd = 5\ns = [0.0, 0.27, 0.28, 0.2, 0.15, 0.1]\nq = 0.20\n\n\n\n2.4.3 Variables\n\nIndependent Variables: A list of tuples with pairs of neighboring schedules.\nDependent Variables: A list with rankings for each tuple of pairwise schedules. Eg: If the rank for ([2,1,1], [1,1,2]) is 1 this means that the schedule with index 1 ([1,1,2]) has the lowest objective value.\n\n\n\n2.4.4 Data Collection\nData Collection Method: The data set will be generated using simulation in which random samples will be drawn from the population of all possible schedules. For each sample a random neighboring schedule will be created.\n\n\n2.4.5 Sample Size and Selection\nSample Size: The total population size equals \\({{N + T -1}\\choose{N}} \\approx 52\\ mln\\). The size of the training and test sets will be varied to explore the effect on model performance.\nSample Selection: The samples will be drawn from a lexicographic order of possible schedules in order to accurately reflect the combinatorial nature of the problem and to ensure unbiased sampling from the entire combinatorial space.\n\n\n2.4.6 Experimental Procedure\n\n\n\n\n\ngraph TD\n    A[\"Create features\"]:::path --&gt;|\"option 1\"| B[\"from population\"]\n    A --&gt;|\"option 2\"| C[\"random subset\"]:::path\n    B --&gt; D[\"Create pairs\"]:::path\n    C --&gt; D\n    D --&gt;|\"option 1\"| E[\"random\"]\n    D --&gt;|\"option 2\"| F[\"neighbors\"]:::path\n    E --&gt; G[\"Create labels\"]:::path\n    F --&gt; G\n    G --&gt;|\"option 1\"| H[\"objective\"]\n    G --&gt;|\"option 2\"| I[\"ranking\"]:::path\n    H --&gt; J[\"Split dataset\"]:::path\n    I --&gt; J\n    J --&gt; K[\"Train XGBoost\"]:::path\n    K --&gt; L[\"Evaluate model\"]:::path\n    \n    classDef path stroke:#f00\n\n\n\n\n\n\nStep 1: Randomly select a subset of schedules.\n\nfrom functions import random_combination_with_replacement\n\nnum_schedules = 20000\n\nstart = time.time()\nschedules = random_combination_with_replacement(T, N, num_schedules)\nfor schedule in schedules[:5]:\n    print(f\"Schedule: {schedule}\")\nend = time.time()\nprint(f\"\\nProcessing time: {end - start} seconds\\n\")\n\nTotal number of combinations: 51895935\nSchedule: [6, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nSchedule: [5, 2, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\nSchedule: [5, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\nSchedule: [5, 3, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nSchedule: [5, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n\nProcessing time: 0.25200986862182617 seconds\n\n\n\nStep 2: Create pairs of neighboring schedules.\n\nfrom functions import create_neighbors_list\n\nstart = time.time()\nneighbors_list = create_neighbors_list(schedules)\nfor neighbors in neighbors_list[:5]:\n    print(f\"Neighbors: {neighbors}\")\nend = time.time() \ntraining_set_feat_time = end - start\nprint(f\"\\nProcessing time: {training_set_feat_time} seconds\\n\")\n\nNeighbors: ([6, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\nNeighbors: ([5, 2, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [5, 2, 0, 3, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0])\nNeighbors: ([5, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 1, 0, 2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])\nNeighbors: ([5, 3, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\nNeighbors: ([5, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 1, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0])\n\nProcessing time: 0.04545998573303223 seconds\n\n\n\nStep 3: For each schedule in each pair calculate the objective. For each pair save the index of the schedule that has the lowest objective value.\n\nfrom functions import calculate_objective\n\nstart = time.time()\nobjectives = [[calculate_objective(neighbors[0], s, d, q), calculate_objective(neighbors[1], s, d, q)] for neighbors in neighbors_list]\nrankings = [0 if obj[0] &lt; obj[1] else 1 for obj in objectives]\nfor i in range(5):\n    print(f\"Objectives: {objectives[i]}, Ranking: {rankings[i]}\")\n\nend = time.time()\ntraining_set_lab_time = end - start\nprint(f\"\\nProcessing time: {training_set_lab_time} seconds\\n\")\n\nObjectives: [54.5837589494809, 63.06196323342047], Ranking: 0\nObjectives: [50.39121411955698, 42.491868776417846], Ranking: 1\nObjectives: [30.1233299264942, 31.142483474646234], Ranking: 0\nObjectives: [58.183786100856075, 41.74569112187398], Ranking: 1\nObjectives: [42.31473511029067, 34.09506190894712], Ranking: 1\n\nProcessing time: 11.973438024520874 seconds\n\n\n\nStep 4: Create training and test sets.\n\n# Prepare the dataset\nX = []\nfor neighbors in neighbors_list:\n    X.append(neighbors[0] + neighbors[1])\n\nX = np.array(X)\ny = np.array(rankings)\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nStep 5: Train the XGBoost model.\n\n\n\n\n\nflowchart TD\n    A[Start] --&gt; B[Initialize StratifiedKFold]\n    B --&gt; C[Initialize XGBClassifier]\n    C --&gt; D[Set results as empty list]\n    D --&gt; E[Loop through each split of cv split]\n    E --&gt; F[Get train and test indices]\n    F --&gt; G[Split X and y into X_train, X_test, y_train, y_test]\n    G --&gt; H[Clone the classifier]\n    H --&gt; I[Call fit_and_score function]\n    I --&gt; J[Fit the estimator]\n    J --&gt; K[Score on training set]\n    J --&gt; L[Score on test set]\n    K --&gt; M[Return estimator, train_score, test_score]\n    L --&gt; M\n    M --&gt; N[Append the results]\n    N --&gt; E\n    E --&gt; O[Loop ends]\n    O --&gt; P[Print results]\n    P --&gt; Q[End]\n\n\n\n\n\n\n\nclass CustomCallback(TrainingCallback):\n    def __init__(self, period=10):\n        self.period = period\n\n    def after_iteration(self, model, epoch, evals_log):\n        if (epoch + 1) % self.period == 0:\n            print(f\"Epoch {epoch}, Evaluation log: {evals_log['validation_0']['logloss'][epoch]}\")\n        return False\n    \ndef fit_and_score(estimator, X_train, X_test, y_train, y_test):\n    \"\"\"Fit the estimator on the train set and score it on both sets\"\"\"\n    estimator.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=0\n    )\n\n    train_score = estimator.score(X_train, y_train)\n    test_score = estimator.score(X_test, y_test)\n\n    return estimator, train_score, test_score\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=94)\n\n# Initialize the XGBClassifier without early stopping here\nclf = xgb.XGBClassifier(\n    tree_method=\"hist\",\n    max_depth=6,\n    min_child_weight=1,\n    gamma=0.1,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    learning_rate=0.1,\n    n_estimators=100,\n    early_stopping_rounds=9,\n    callbacks=[CustomCallback(period=10)]\n)\n\nstart = time.time()\nresults = []\n\nfor train_idx, test_idx in cv.split(X, y):\n    X_train, X_test = X[train_idx], X[test_idx]\n    y_train, y_test = y[train_idx], y[test_idx]\n    \n    est, train_score, test_score = fit_and_score(\n        clone(clf), X_train, X_test, y_train, y_test\n    )\n    results.append((est, train_score, test_score))\nend = time.time()\ntraining_time = end - start\nprint(f\"\\nTraining time: {training_time} seconds\\n\")\n\nEpoch 9, Evaluation log: 0.4306649763137102\nEpoch 19, Evaluation log: 0.3754125210577622\nEpoch 29, Evaluation log: 0.3378293159417808\nEpoch 39, Evaluation log: 0.3101358714653179\nEpoch 49, Evaluation log: 0.28298763402923943\nEpoch 59, Evaluation log: 0.2622554725513328\nEpoch 69, Evaluation log: 0.24587549114623106\nEpoch 79, Evaluation log: 0.22916114588547498\nEpoch 89, Evaluation log: 0.2150189774436294\nEpoch 99, Evaluation log: 0.20129394271213097\nEpoch 9, Evaluation log: 0.43099820472486317\nEpoch 19, Evaluation log: 0.37065103686973455\nEpoch 29, Evaluation log: 0.33001496150624005\nEpoch 39, Evaluation log: 0.299173302214127\nEpoch 49, Evaluation log: 0.27335739771998485\nEpoch 59, Evaluation log: 0.2500677617737092\nEpoch 69, Evaluation log: 0.233362381217652\nEpoch 79, Evaluation log: 0.21946356991131324\nEpoch 89, Evaluation log: 0.20643334811279784\nEpoch 99, Evaluation log: 0.19477395510429052\nEpoch 9, Evaluation log: 0.4407958918903023\nEpoch 19, Evaluation log: 0.37766124446410687\nEpoch 29, Evaluation log: 0.3358716173050925\nEpoch 39, Evaluation log: 0.3087109939744696\nEpoch 49, Evaluation log: 0.2825579260867089\nEpoch 59, Evaluation log: 0.26372005987656305\nEpoch 69, Evaluation log: 0.2450487968652742\nEpoch 79, Evaluation log: 0.23053600710933098\nEpoch 89, Evaluation log: 0.21747738224547356\nEpoch 99, Evaluation log: 0.20524129192432156\nEpoch 9, Evaluation log: 0.43960679465346036\nEpoch 19, Evaluation log: 0.37320716692693534\nEpoch 29, Evaluation log: 0.3361116916276515\nEpoch 39, Evaluation log: 0.30514134060172365\nEpoch 49, Evaluation log: 0.2767521960195154\nEpoch 59, Evaluation log: 0.25612954078486655\nEpoch 69, Evaluation log: 0.2368823217378231\nEpoch 79, Evaluation log: 0.2219816669691354\nEpoch 89, Evaluation log: 0.2083687923947\nEpoch 99, Evaluation log: 0.19557184584237985\nEpoch 9, Evaluation log: 0.42898315250501035\nEpoch 19, Evaluation log: 0.37049675614014266\nEpoch 29, Evaluation log: 0.33149111922224983\nEpoch 39, Evaluation log: 0.3039379335241392\nEpoch 49, Evaluation log: 0.2762078475758899\nEpoch 59, Evaluation log: 0.2569677136694081\nEpoch 69, Evaluation log: 0.24122243327391335\nEpoch 79, Evaluation log: 0.22651123340870255\nEpoch 89, Evaluation log: 0.2117489932969911\nEpoch 99, Evaluation log: 0.19974056411441415\n\nTraining time: 0.9579949378967285 seconds\n\n\n\nStep 6: To evaluate the performance of the XGBoost model, we will use Stratified K-Fold Cross-Validation with 5 splits, ensuring each fold maintains the same class distribution as the original dataset. Using StratifiedKFold(n_splits=5, shuffle=True, random_state=94), the dataset will be divided into five folds. In each iteration, the model will be trained on four folds and evaluated on the remaining fold. A custom callback, CustomCallback(period=10), will print the evaluation log every 10 epochs. The fit_and_score function will fit the model and score it on both the training and test sets, storing the results for each fold. This provides insight into the model’s performance across different subsets of the data, helps in understanding how well the model generalizes to unseen data and identifies potential overfitting or underfitting issues. The overall processing time for the cross-validation will also be recorded.\n\n# Print results\nfor i, (est, train_score, test_score) in enumerate(results):\n    print(f\"Fold {i+1} - Train Score: {train_score:.4f}, Test Score: {test_score:.4f}\")\n\nFold 1 - Train Score: 0.9560, Test Score: 0.9425\nFold 2 - Train Score: 0.9578, Test Score: 0.9475\nFold 3 - Train Score: 0.9596, Test Score: 0.9367\nFold 4 - Train Score: 0.9560, Test Score: 0.9467\nFold 5 - Train Score: 0.9591, Test Score: 0.9415\n\n\nTraining the model on the entire dataset provides a final model that has learned from all available data. Recording the training time helps in understanding the computational efficiency and scalability of the model with the given hyperparameters.\n\n# Fit the model on the entire dataset\n# Initialize the XGBClassifier without early stopping here\n\nstart = time.time()\nclf = xgb.XGBClassifier(\n    tree_method=\"hist\",\n    max_depth=6,\n    min_child_weight=1,\n    gamma=0.1,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    learning_rate=0.1,\n    n_estimators=100\n)\n\nclf.fit(X, y)\nend= time.time()\nmodeling_time = end - start\nprint(f\"\\nTraining time: {modeling_time} seconds\\n\")\n\n\nTraining time: 0.1336047649383545 seconds\n\n\n\nGenerating test schedules and calculating their objectives and rankings allows us to create a new dataset for evaluating the model’s performance on unseen data.\n\nnum_schedules = 1000\n\ntest_schedules = random_combination_with_replacement(T, N, num_schedules)\ntest_neighbors = create_neighbors_list(test_schedules)\n\nstart = time.time()\ntest_objectives = [[calculate_objective(test_neighbor[0], s, d, q), calculate_objective(test_neighbor[1], s, d, q)] for test_neighbor in test_neighbors]\ntest_rankings = [0 if test_obj[0] &lt; test_obj[1] else 1 for test_obj in test_objectives]\nend = time.time()\nevaluation_time = end - start\nprint(f\"\\nEvaluation time: {evaluation_time} seconds\\n\")\n\nfor i in range(6):\n    print(f\"Neighbors: {test_neighbors[i]},\\nObjectives: {test_objectives[i]}, Ranking: {test_rankings[i]}\\n\")\n\nTotal number of combinations: 51895935\n\nEvaluation time: 0.6669309139251709 seconds\n\nNeighbors: ([5, 2, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]),\nObjectives: [51.393389677820274, 38.55174989458237], Ranking: 1\n\nNeighbors: ([7, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [7, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]),\nObjectives: [76.70676026012097, 76.70676026012097], Ranking: 1\n\nNeighbors: ([5, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [4, 2, 2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]),\nObjectives: [45.665115476047475, 31.008262214009903], Ranking: 1\n\nNeighbors: ([7, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [7, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]),\nObjectives: [60.02225652405359, 60.02225652405359], Ranking: 1\n\nNeighbors: ([5, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),\nObjectives: [62.404302343844876, 56.68369929887332], Ranking: 1\n\nNeighbors: ([5, 1, 3, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 1, 3, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0]),\nObjectives: [41.936690167057705, 27.872890528268822], Ranking: 1\n\n\n\nMaking predictions on new data and comparing them to the actual rankings provides an evaluation of the model’s performance in practical applications. Recording the prediction time helps in understanding the model’s efficiency during inference.\n\ninput_X = test_neighbors\nX_new = []\nfor test_neighbor in input_X:\n    X_new.append(test_neighbor[0] + test_neighbor[1])\n    \n# Predict the target for new data\nstart = time.time()\ny_pred = clf.predict(X_new)\n\n# If you want to get the probability estimates\ny_pred_proba = clf.predict_proba(X_new)\nend = time.time()\nprediction_time = end - start\nprint(f\"\\nPrediction time: {prediction_time} seconds\\n\")\nimprove_rate = prediction_time/evaluation_time\n\nprint(f\"test_rankings = {np.array(test_rankings)[:6]}, \\ny_pred = {y_pred[:6]}, \\ny_pred_proba = \\n{y_pred_proba[:6]}\")\n\n\nPrediction time: 0.0072040557861328125 seconds\n\ntest_rankings = [1 1 1 1 1 1], \ny_pred = [1 1 1 1 1 1], \ny_pred_proba = \n[[0.01149929 0.9885007 ]\n [0.09205121 0.9079488 ]\n [0.04383355 0.95616645]\n [0.08423382 0.9157662 ]\n [0.01607895 0.98392105]\n [0.00475138 0.9952486 ]]\n\n\nCalculating the ambiguousness of the predicted probabilities helps in understanding the model’s confidence in its predictions. High ambiguousness indicates uncertain predictions, while low ambiguousness indicates confident predictions.\nCalculating cumulative error rate and cumulative accuracy helps in understanding how the model’s performance evolves over the dataset.\nVisualizing the relationship between ambiguousness and error provides insights into how uncertainty in the model’s predictions correlates with its accuracy. This can help in identifying patterns and understanding the conditions under which the model performs well or poorly.\n\ndef calculate_ambiguousness(y_pred_proba: np.ndarray) -&gt; np.ndarray:\n    \"\"\"\n    Calculate the ambiguousness for each array of probabilities.\n\n    Parameters:\n    y_pred_proba (np.ndarray): Array of shape (n_samples, n_classes) with predicted probabilities for each class.\n\n    Returns:\n    np.ndarray: Array of ambiguousness for each sample.\n    \"\"\"\n    # Ensure probabilities are in numpy array\n    y_pred_proba = np.array(y_pred_proba)\n    \n    # Calculate ambiguousness for each array of probabilities\n    ambiguousness = -np.sum(y_pred_proba * np.log2(y_pred_proba), axis=1)\n    \n    return ambiguousness\n\nerrors = np.abs(y_pred - np.array(test_rankings))\nambiguousness: np.ndarray = calculate_ambiguousness(y_pred_proba)\ndf = pd.DataFrame({\"Ambiguousness\": ambiguousness, \"Error\": errors}).sort_values(by=\"Ambiguousness\")\ndf['Cumulative error rate'] = df['Error'].expanding().mean()\n# Calculate cumulative accuracy\ndf['Cumulative accuracy'] = 1 - df['Cumulative error rate']\ndf.head()\n\n\n# Create traces\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df[\"Ambiguousness\"], y=df[\"Error\"],\n                    mode=\"markers\",\n                    name=\"Error\",\n                    marker=dict(size=9)))\nfig.add_trace(go.Scatter(x=df[\"Ambiguousness\"], y=df[\"Cumulative accuracy\"],\n                    mode=\"lines\",\n                    name=\"Cum. accuracy\",\n                    line = dict(width = 3, dash = 'dash')))\nfig.update_layout(title=f\"Error vs Ambiguousness&lt;/br&gt;&lt;/br&gt;&lt;sub&gt;n={num_schedules}&lt;/sub&gt;\",\n                   xaxis_title=\"Ambiguousness\",\n                   yaxis_title=\"Error\",\n                   hoverlabel=dict(font=dict(color='white')))\nfig.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#results",
    "href": "xgboost-pairwise-ranking.html#results",
    "title": "2  XGBoost model for pairwise ranking",
    "section": "2.5 Results",
    "text": "2.5 Results\nResults: We wanted to test whether an XGBoost classification model could be used to assess and rank the quality of pairs of schedules. For performance benchmarking we use the conventional calculation method using Lindley recursions.\nThe evaluation of 1000 test schedules took 0.0072 seconds for the the XGBoost model and 0.6669 for the conventional method, which is an improvement of 92 X.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#discussion",
    "href": "xgboost-pairwise-ranking.html#discussion",
    "title": "2  XGBoost model for pairwise ranking",
    "section": "2.6 Discussion",
    "text": "2.6 Discussion\nDiscussion Points: Outline key points for discussion based on possible results. This may include interpretation of results, implications for theory and practice, limitations, and suggestions for future research.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#timeline",
    "href": "xgboost-pairwise-ranking.html#timeline",
    "title": "2  XGBoost model for pairwise ranking",
    "section": "2.7 Timeline",
    "text": "2.7 Timeline\nTimeline: This experiment was started on 25-07-2024",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#references",
    "href": "xgboost-pairwise-ranking.html#references",
    "title": "2  XGBoost model for pairwise ranking",
    "section": "2.8 References",
    "text": "2.8 References\nReferences: List any references or sources cited in this report.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost model for pairwise ranking</span>"
    ]
  }
]