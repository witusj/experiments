[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Experiments",
    "section": "",
    "text": "Preface\nThis book contains all experiment protocols for my research on appointment scheduling.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Surrogate models for schedule evaluation",
    "section": "",
    "text": "Objective\nObjective: Testing the performance of an XGBoost model trained for predicting objective values and ranking pairwise schedules.\nBackground: To find optimal solutions for appointment scheduling problems one approach is to create local search neighborhoods and evaluate the schedules in that set. A better search method either (1) - creates smaller search neighborhoods or (2) - evaluates faster.\nOne approach for speeding up evaluation is to create surrogate models, or metamodels. These are simplified representations of complex systems that are often created using machine learning techniques. When evaluating a complex system is computationally expensive, it’s more efficient to use a method that quickly identifies a subset of solutions with a high likelihood of containing the optimal or near-optimal solution. By focusing computational resources on refining the search within this promising subset, rather than across the entire solution space, we can significantly reduce the overall computational burden (Ho et al. 2000).\nWe will test two approaches:",
    "crumbs": [
      "Surrogate models for schedule evaluation"
    ]
  },
  {
    "objectID": "intro.html#objective",
    "href": "intro.html#objective",
    "title": "Surrogate models for schedule evaluation",
    "section": "",
    "text": "Cardinal model - Directly assessing the objective values from a given sample schedule using an XGBoost regressor.\nOrdinal model - Predicting the preferred schedule from a pair of sampled schedules using an XGBoost classifier.\n\n\n\n\n\n\n\n\n\nModel\nCardinal (Regressor)\nOrdinal (Classifier)\n\n\n\n\nEvaluation (approx.)\n\\(f: S \\rightarrow Objective, \\\\ f(S) \\in \\mathbb{R}^{18}\\)\n\\(g: (S_0,S_1) \\rightarrow \\text{\\{0, if } S_0 \\text{ is better; otherwise 1\\}}, \\\\ g(S_0, S_1) \\in \\mathbb{R}^{2 \\times 18}\\)\n\n\nComparison (schedules \\(S_0, S_1\\))\n\\(f(S_0)\\) vs. \\(f(S_1)\\)\n\\(g(S_0, S_1)\\)\n\n\nParameter Tuning\nOptuna\nOptuna\n\n\nTraining Data\n40k rows\n20k rows\n\n\n\n\nResults\n\n\n\n\nHo, Y-C, C G Cassandras, C-H Chen, and L Dai. 2000. “Ordinal Optimisation and Simulation.” Journal of the Operational Research Society 51 (4): 490–500. https://doi.org/10.1057/palgrave.jors.2600906.",
    "crumbs": [
      "Surrogate models for schedule evaluation"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html",
    "href": "xgboost-pairwise-ranking.html",
    "title": "1  XGBoost classification model for pairwise ranking",
    "section": "",
    "text": "1.1 Objective\nObjective: Testing the performance of an XGBoost model trained for ranking pairwise schedules.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>XGBoost classification model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#background",
    "href": "xgboost-pairwise-ranking.html#background",
    "title": "1  XGBoost classification model for pairwise ranking",
    "section": "1.2 Background",
    "text": "1.2 Background\nIn this experiment we develop a Machine Learning model using XGBoost that can evaluate two neighboring schedules and rank them according to preference. This ranking model can be applied to quickly guide the search process towards a ‘good enough’ solution.\nThe choice of using an ordinal model instead of a cardinal model is based on the consideration that it is significantly easier to determine whether alternative A is superior to B than to quantify the exact difference between A and B. This makes intuitive sense when considering the scenario of holding two identical-looking packages and deciding which one is heavier, as opposed to estimating the precise weight difference between them. (Ho et al. 2000).",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>XGBoost classification model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#hypothesis",
    "href": "xgboost-pairwise-ranking.html#hypothesis",
    "title": "1  XGBoost classification model for pairwise ranking",
    "section": "1.3 Hypothesis",
    "text": "1.3 Hypothesis\nAn XGBoost ranking model achieves superior computational efficiency compared to evaluating each element of a pair individually, leading to faster overall performance in ranking tasks.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>XGBoost classification model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#methodology",
    "href": "xgboost-pairwise-ranking.html#methodology",
    "title": "1  XGBoost classification model for pairwise ranking",
    "section": "1.4 Methodology",
    "text": "1.4 Methodology\n\n1.4.1 Tools and Materials\nWe use packages from Scikit-learn to prepare training data and evaluate the model and the XGBClassifier interface from the XGBoost library.\n\nimport time\nimport math\nimport json\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, GridSearchCV\nfrom sklearn.base import clone\nimport xgboost as xgb\nfrom xgboost.callback import TrainingCallback\nimport plotly.graph_objects as go\nimport pickle\nimport random\n\n\n\n1.4.2 Experimental Design\nTo compare an XGBoost Machine Learning model with a simple evaluation of each individual element of the pair, we will use a pairwise ranking approach. The objective is to rank two neighboring schedules according to preference.\n\nN = 12 # Number of patients\nT = 18 # Number of intervals\nd = 5 # Length of each interval\ns = [0.0, 0.27, 0.28, 0.2, 0.15, 0.1] # Service times distribution\nq = 0.20 # Probability of a scheduled patient not showing up\nw = 0.8 # Weight for the waiting time in objective function\nnum_schedules = 20000 # Number of schedules to sample\n\nWe will create a random set of pairs of neighboring schedules with \\(N = 12\\) patients and \\(T = 18\\) intervals of length \\(d = 5\\).\nA neighbor of a schedule x is considered a schedule x’ where single patients have been shifted one interval to the left. Eg: ([2,1,1,2], [1,2,0,3]) are neighbors and ([2,1,1,2], [2,1,3,0]) are not, because [1,2,0,3] - [2,1,1,2] = [-1, 1, -1, 1] and [2,1,3,0] - [2,1,1,2] = [0, 0, 2, -2].\nService times will have a discrete distribution. The probability of a scheduled patient not showing up will be \\(q = 0.2\\).\nThe objective function will be the weighted average of the total waiting time of all patients and overtime. The model will be trained to predict which of the two neighboring schedules has the lowest objective value. The prediction time will be recorded. Then the same schedules will be evaluated by computing the objective value and then ranked.\n\n\n1.4.3 Variables\n\nIndependent Variables: A list of tuples with pairs of neighboring schedules.\nDependent Variables: A list with rankings for each tuple of pairwise schedules. Eg: If the rank for ([2,1,1], [1,1,2]) equals 0 this means that the schedule with index 0 ([2,1,1]) has the lowest objective value.\n\n\n\n1.4.4 Data Collection\nThe data set will be generated using simulation in which random samples will be drawn from the population of all possible schedules. For each sample a random neighboring schedule will be created.\n\n\n1.4.5 Sample Size and Selection\nSample Size: The total population size equals \\({{N + T -1}\\choose{N}} \\approx\\) 52.0 mln. For this experiment we will be using a relatively small sample of 20000 pairs of schedules.\nSample Selection: The samples will be drawn from a lexicographic order of possible schedules in order to accurately reflect the combinatorial nature of the problem and to ensure unbiased sampling from the entire combinatorial space.\n\n\n1.4.6 Experimental Procedure\nThe experiment involves multiple steps, beginning with data preparation and concluding with model evaluation.The diagram below illustrates the sequence of steps.\n\n\n\n\n\ngraph TD\n    A[\"From population\"] --&gt;|\"Sample\"| B[\"Random subset\"]\n    B --&gt; |Create neighbors| C[\"Features: Schedule pairs\"]\n    C --&gt; |Calculate objectives| D[\"Objective values\"]\n    D --&gt; |Rank objectives| E[\"Labels: Rankings\"]\n    E --&gt; |\"Split dataset\"| F[\"Training set\"]\n    E --&gt; |\"Split dataset\"| G[\"Test set\"]\n    F --&gt; |\"Train\"| H[\"Model\"]\n    H[\"Model\"] --&gt; |\"Apply\"| G[\"Test set\"]\n    G[\"Test set\"] --&gt; |\"Evaluate\"| I[\"Performance\"]\n\n\n\n\n\n\nStep 1: Randomly select a subset of schedules.\n\nfrom functions import random_combination_with_replacement\n\nstart = time.time()\nschedules = random_combination_with_replacement(T, N, num_schedules)\nprint(f\"Sampled: {len(schedules)} schedules\\n\")\nh = random.choices(range(len(schedules)), k=7)\nprint(f\"Sampled schedules: {h}\")\nfor i in h:\n    print(f\"Schedule: {schedules[i]}\")\nend = time.time()\ndata_prep_time = end - start\n\nprint(f\"\\nProcessing time: {data_prep_time} seconds\\n\")\n\nTotal number of combinations: 51895935\nSampled: 20000 schedules\n\nSampled schedules: [18132, 17969, 12704, 10899, 8027, 3895, 11270]\nSchedule: [5, 2, 1, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nSchedule: [5, 1, 1, 0, 2, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nSchedule: [7, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\nSchedule: [3, 6, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]\nSchedule: [7, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\nSchedule: [5, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nSchedule: [5, 3, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nProcessing time: 0.20149874687194824 seconds\n\n\n\nStep 2: Create pairs of neighboring schedules.\n\nfrom functions import create_neighbors_list\n\nstart = time.time()\nneighbors_list = [create_neighbors_list(schedule) for schedule in schedules] # This can be done in parellel to improve speed\nend = time.time()\nfor i in h:\n    original_schedule = neighbors_list[i][0]\n    neighbor_schedule = neighbors_list[i][1]\n    difference = [x - y for x, y in zip(neighbors_list[i][0], neighbors_list[i][1])]\n    print(f\"Neighbors\\n{original_schedule}\\n{neighbor_schedule}\\n{difference}\")\ntraining_set_feat_time = end - start\nprint(f\"\\nProcessing time: {training_set_feat_time} seconds\\n\")\n\nNeighbors\n[5, 2, 1, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n[4, 3, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]\n[1, -1, 1, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0]\nNeighbors\n[5, 1, 1, 0, 2, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n[5, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]\n[0, 0, 1, -1, 1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0]\nNeighbors\n[7, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n[6, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1]\n[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]\nNeighbors\n[3, 6, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]\n[3, 6, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nNeighbors\n[7, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\n[7, 1, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0]\nNeighbors\n[5, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n[6, 2, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n[-1, 0, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nNeighbors\n[5, 3, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n[6, 2, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n[-1, 1, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nProcessing time: 83.38710618019104 seconds\n\n\n\nStep 3: For each schedule in each pair calculate the objective. For each pair save the index of the schedule that has the lowest objective value.\n\nfrom functions import calculate_objective\n\nobjectives_schedule_1 = [w * calculate_objective(neighbor[0], s, d, q)[0] + (1 - w) * calculate_objective(neighbor[0], s, d, q)[1] for neighbor in neighbors_list]\nstart = time.time()\nobjectives_schedule_2 = [w * calculate_objective(neighbor[1], s, d, q)[0] + (1 - w) * calculate_objective(neighbor[1], s, d, q)[1] for neighbor in neighbors_list]\nend = time.time()\ntraining_set_lab_time = end - start\nobjectives = [[obj, objectives_schedule_2[i]] for i, obj in enumerate(objectives_schedule_1)]\nrankings = np.argmin(objectives, axis=1).tolist()\nfor i in range(5):\n    print(f\"Objectives: {objectives[i]}, Ranking: {rankings[i]}\")\n\nprint(f\"\\nProcessing time: {training_set_lab_time} seconds\\n\")\n\n# Saving neighbors_list and objectives to a pickle file\nfile_path = 'neighbors_and_objectives.pkl'\nwith open(file_path, 'wb') as f:\n    pickle.dump({'neighbors_list': neighbors_list, 'objectives': objectives, 'rankings': rankings}, f)\n    print(f\"Data saved successfully to '{file_path}'\")\n\nObjectives: [36.795289714979525, 31.803646314816802], Ranking: 1\nObjectives: [49.47536904144756, 56.955217267557444], Ranking: 0\nObjectives: [31.84287006994137, 36.931326939681846], Ranking: 0\nObjectives: [40.877402631270236, 34.24367633558358], Ranking: 1\nObjectives: [32.05870380007966, 35.513466172496535], Ranking: 0\n\nProcessing time: 19.11839509010315 seconds\n\nData saved successfully to 'neighbors_and_objectives.pkl'\n\n\nStep 4: Create training and test sets.\n\nnp.argmin([1,1])\n\n0\n\n\n\n# Prepare the dataset\nX = []\nfor neighbors in neighbors_list:\n    X.append(neighbors[0] + neighbors[1])\n\nX = np.array(X)\ny = np.array(rankings)\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nStep 5: Train the XGBoost model.\n\n\n\n\n\nflowchart TD\n    A[Start] --&gt; B[Initialize StratifiedKFold]\n    B --&gt; C[Initialize XGBClassifier]\n    C --&gt; D[Set results as empty list]\n    D --&gt; E[Loop through each split of cv split]\n    E --&gt; F[Get train and test indices]\n    F --&gt; G[Split X and y into X_train, X_test, y_train, y_test]\n    G --&gt; H[Clone the classifier]\n    H --&gt; I[Call fit_and_score function]\n    I --&gt; J[Fit the estimator]\n    J --&gt; K[Score on training set]\n    J --&gt; L[Score on test set]\n    K --&gt; M[Return estimator, train_score, test_score]\n    L --&gt; M\n    M --&gt; N[Append the results]\n    N --&gt; E\n    E --&gt; O[Loop ends]\n    O --&gt; P[Print results]\n    P --&gt; Q[End]\n\n\n\n\n\n\n\nclass CustomCallback(TrainingCallback):\n    def __init__(self, period=10):\n        self.period = period\n\n    def after_iteration(self, model, epoch, evals_log):\n        if (epoch + 1) % self.period == 0:\n            print(f\"Epoch {epoch}, Evaluation log: {evals_log['validation_0']['logloss'][epoch]}\")\n        return False\n    \ndef fit_and_score(estimator, X_train, X_test, y_train, y_test):\n    \"\"\"Fit the estimator on the train set and score it on both sets\"\"\"\n    estimator.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=0\n    )\n\n    train_score = estimator.score(X_train, y_train)\n    test_score = estimator.score(X_test, y_test)\n\n    return estimator, train_score, test_score\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=94)\n\n# Initialize the XGBClassifier without early stopping here\n# Load the best trial parameters from a JSON file.\nwith open(\"model_params.json\", \"r\") as f:\n    model_params = json.load(f)\n    \n# Initialize the EarlyStopping callback with validation dataset\nearly_stop = xgb.callback.EarlyStopping(\n    rounds=10, metric_name='logloss', data_name='validation_0', save_best=True\n)\n\nclf = xgb.XGBClassifier(\n    tree_method=\"hist\",\n    max_depth=model_params[\"max_depth\"],\n    min_child_weight=model_params[\"min_child_weight\"],\n    gamma=model_params[\"gamma\"],\n    subsample=model_params[\"subsample\"],\n    colsample_bytree=model_params[\"colsample_bytree\"],\n    learning_rate=model_params[\"learning_rate\"],\n    n_estimators=model_params[\"n_estimators\"],\n    early_stopping_rounds=9,\n    #callbacks=[CustomCallback(period=50), early_stop],\n    callbacks=[CustomCallback(period=50)],\n)\nprint(\"Params: \")\nfor key, value in model_params.items():\n    print(f\" {key}: {value}\")\n\nstart = time.time()\nresults = []\n\nfor train_idx, test_idx in cv.split(X, y):\n    X_train, X_test = X[train_idx], X[test_idx]\n    y_train, y_test = y[train_idx], y[test_idx]\n    est, train_score, test_score = fit_and_score(\n        clone(clf), X_train, X_test, y_train, y_test\n    )\n    results.append((est, train_score, test_score))\nend = time.time()\ntraining_time = end - start\nprint(f\"\\nTraining time: {training_time} seconds\\n\")\n\nParams: \n max_depth: 6\n min_child_weight: 1\n gamma: 0.1\n subsample: 0.8\n colsample_bytree: 0.8\n learning_rate: 0.1\n n_estimators: 100\nEpoch 49, Evaluation log: 0.03898450266907457\nEpoch 99, Evaluation log: 0.02887392766550329\nEpoch 49, Evaluation log: 0.04614704144001007\nEpoch 99, Evaluation log: 0.03387743881634014\nEpoch 49, Evaluation log: 0.03942839195596753\nEpoch 99, Evaluation log: 0.02903919009536185\nEpoch 49, Evaluation log: 0.03955345450242748\nEpoch 99, Evaluation log: 0.02937592053249682\nEpoch 49, Evaluation log: 0.03887066773767583\nEpoch 99, Evaluation log: 0.0274349582104187\n\nTraining time: 2.196714162826538 seconds\n\n\n\nStep 6: To evaluate the performance of the XGBoost ranking model, we will use Stratified K-Fold Cross-Validation with 5 splits, ensuring each fold maintains the same class distribution as the original dataset. Using StratifiedKFold(n_splits=5, shuffle=True, random_state=94), the dataset will be divided into five folds. In each iteration, the model will be trained on four folds and evaluated on the remaining fold. A custom callback, CustomCallback(period=10), will print the evaluation log every 10 epochs.\nThe fit_and_score function will fit the model and score it on both the training and test sets, storing the results for each fold. This provides insight into the model’s performance across different subsets of the data, helps in understanding how well the model generalizes to unseen data and identifies potential overfitting or underfitting issues. The overall processing time for the cross-validation will also be recorded.\n\n# Print results\nfor i, (est, train_score, test_score) in enumerate(results):\n    print(f\"Fold {i+1} - Train Score (Accuracy): {train_score:.4f}, Test Score (Accuracy): {test_score:.4f}\")\n\nFold 1 - Train Score (Accuracy): 0.9949, Test Score (Accuracy): 0.9915\nFold 2 - Train Score (Accuracy): 0.9951, Test Score (Accuracy): 0.9890\nFold 3 - Train Score (Accuracy): 0.9939, Test Score (Accuracy): 0.9900\nFold 4 - Train Score (Accuracy): 0.9953, Test Score (Accuracy): 0.9898\nFold 5 - Train Score (Accuracy): 0.9945, Test Score (Accuracy): 0.9892\n\n\nTraining the model on the entire dataset provides a final model that has learned from all available data. Recording the training time helps in understanding the computational efficiency and scalability of the model with the given hyperparameters.\n\n# Fit the model on the entire dataset\n# Initialize the XGBClassifier without early stopping here\n\nstart = time.time()\n\nclf = xgb.XGBClassifier(\n    tree_method=\"hist\",\n    max_depth=model_params[\"max_depth\"],\n    min_child_weight=model_params[\"min_child_weight\"],\n    gamma=model_params[\"gamma\"],\n    subsample=model_params[\"subsample\"],\n    colsample_bytree=model_params[\"colsample_bytree\"],\n    learning_rate=model_params[\"learning_rate\"],\n    n_estimators=model_params[\"n_estimators\"],\n)\n\nclf.fit(X, y)\nend= time.time()\nmodeling_time = end - start\n\n# Calculate and print the training accuracy\ntraining_accuracy = clf.score(X, y)\nprint(f\"Training accuracy: {training_accuracy * 100:.2f}%\\n\")\n\nprint(f\"\\nTraining time: {modeling_time} seconds\\n\")\n\nTraining accuracy: 99.48%\n\n\nTraining time: 0.3158299922943115 seconds\n\n\n\n\n\n1.4.7 Validation\nGenerating test schedules and calculating their objectives and rankings allows us to create a new dataset for evaluating the model’s performance on unseen data.\n\nnum_test_schedules = 1000\n\ntest_schedules = random_combination_with_replacement(T, N, num_test_schedules)\ntest_neighbors = [create_neighbors_list(test_schedule) for test_schedule in test_schedules] # This can be done in parellel to improve speed\n\nprint(f\"Sampled: {len(test_schedules)} schedules\\n\")\n\ntest_objectives_schedule_1 = [w * calculate_objective(test_neighbor[0], s, d, q)[0] + (1 - w) * calculate_objective(test_neighbor[0], s, d, q)[1] for test_neighbor in test_neighbors]\n# Start time measeurement for the evaluation\nstart = time.time()\ntest_objectives_schedule_2 = [w * calculate_objective(test_neighbor[1], s, d, q)[0] + (1 - w) * calculate_objective(test_neighbor[1], s, d, q)[1] for test_neighbor in test_neighbors]\ntest_rankings = [0 if test_obj &lt; test_objectives_schedule_2[i] else 1 for i, test_obj in enumerate(test_objectives_schedule_1)]\nend = time.time()\nevaluation_time = end - start\n\n# Combine the objectives for each pair for later processing\ntest_objectives = [[test_obj, test_objectives_schedule_2[i]] for i, test_obj in enumerate(test_objectives_schedule_1)]\n\nprint(f\"\\nEvaluation time: {evaluation_time} seconds\\n\")\n\nfor i in range(6):\n    print(f\"Neighbors: {test_neighbors[i]},\\nObjectives: {test_objectives[i]}, Ranking: {test_rankings[i]}\\n\")\n\nTotal number of combinations: 51895935\nSampled: 1000 schedules\n\n\nEvaluation time: 0.882314920425415 seconds\n\nNeighbors: ([5, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [5, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]),\nObjectives: [46.29595234631293, 38.04396871464288], Ranking: 1\n\nNeighbors: ([6, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [6, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]),\nObjectives: [38.88977145106834, 38.88977145106834], Ranking: 1\n\nNeighbors: ([5, 1, 2, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1]),\nObjectives: [28.534878589073628, 19.07616269669196], Ranking: 1\n\nNeighbors: ([6, 2, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1]),\nObjectives: [40.52564719442312, 35.97839704344874], Ranking: 1\n\nNeighbors: ([6, 1, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [5, 1, 3, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1]),\nObjectives: [43.571403607346944, 32.81150136822844], Ranking: 1\n\nNeighbors: ([7, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [7, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]),\nObjectives: [57.540032750519075, 61.36540820809678], Ranking: 0\n\n\n\nMaking predictions on new data and comparing them to the actual rankings provides an evaluation of the model’s performance in practical applications. Recording the prediction time helps in understanding the model’s efficiency during inference.\n\ninput_X = test_neighbors\nX_new = []\nfor test_neighbor in input_X:\n    X_new.append(test_neighbor[0] + test_neighbor[1])\n    \n# Predict the target for new data\ny_pred = clf.predict(X_new)\n\n# Probability estimates\nstart = time.time()\ny_pred_proba = clf.predict_proba(X_new)\nend = time.time()\nprediction_time = end - start\nprint(f\"\\nPrediction time: {prediction_time} seconds\\n\")\n\nprint(f\"test_rankings = {np.array(test_rankings)[:6]}, \\ny_pred = {y_pred[:6]}, \\ny_pred_proba = \\n{y_pred_proba[:6]}\")\n\n\nPrediction time: 0.003818035125732422 seconds\n\ntest_rankings = [1 1 1 1 1 0], \ny_pred = [1 0 1 1 1 0], \ny_pred_proba = \n[[0.00156182 0.9984382 ]\n [0.99454653 0.00545346]\n [0.00101298 0.998987  ]\n [0.00263816 0.99736184]\n [0.00118709 0.9988129 ]\n [0.9762583  0.02374171]]\n\n\nCalculating the ambiguousness of the predicted probabilities helps in understanding the model’s confidence in its predictions. High ambiguousness indicates uncertain predictions, while low ambiguousness indicates confident predictions.\nAmbiguousness is calculated using the formula for entropy:\n\\[\nH(X) = - \\sum_{i} p(x_i) \\log_b p(x_i)\n\\]\nWhere in our case:\n\n\\(H(X)\\) is the ambiguousness of the random variable \\(X\\) - the set of probability scores for the predicted rankings,\n\\(p(x_i)\\) is probability score \\(x_i\\),\n\\(\\log_b\\) is the logarithm with base \\(b\\) (here \\(\\log_2\\) as we have two predicted values),\nThe sum is taken over all possible outcomes of \\(X\\).\n\nCalculating cumulative error rate and cumulative accuracy helps in understanding how the model’s performance evolves over the dataset.\nVisualizing the relationship between ambiguousness and error provides insights into how uncertainty in the model’s predictions correlates with its accuracy. This can help in identifying patterns and understanding the conditions under which the model performs well or poorly.\n\nfrom functions import calculate_ambiguousness\n\nerrors = np.abs(y_pred - np.array(test_rankings))\n\nambiguousness: np.ndarray = calculate_ambiguousness(y_pred_proba)\ndf = pd.DataFrame({\"Ambiguousness\": ambiguousness, \"Error\": errors}).sort_values(by=\"Ambiguousness\")\ndf['Cumulative error rate'] = df['Error'].expanding().mean()\n# Calculate cumulative accuracy\ndf['Cumulative accuracy'] = 1 - df['Cumulative error rate']\ndf.head()\n\n\n# Create traces\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df[\"Ambiguousness\"], y=df[\"Error\"],\n                    mode=\"markers\",\n                    name=\"Error\",\n                    marker=dict(size=9)))\nfig.add_trace(go.Scatter(x=df[\"Ambiguousness\"], y=df[\"Cumulative accuracy\"],\n                    mode=\"lines\",\n                    name=\"Cum. accuracy\",\n                    line = dict(width = 3, dash = 'dash')))\nfig.update_layout(\n    title={\n        'text': f\"Error vs Ambiguousness&lt;/br&gt;&lt;/br&gt;&lt;sub&gt;n={num_test_schedules}&lt;/sub&gt;\",\n        'y': 0.95,  # Keep the title slightly higher\n        'x': 0.02,\n        'xanchor': 'left',\n        'yanchor': 'top'\n    },\n    xaxis_title=\"Ambiguousness\",\n    yaxis_title=\"Error / Accuracy\",\n    hoverlabel=dict(font=dict(color='white')),\n    margin=dict(t=70)  # Add more space at the top of the chart\n)\nfig.show()\n\n                                                \n\n\n\n\n1.4.8 Hyperparameter Optimization\nIn the initial model the choice of hyperparameters was based on default values, examples from demo’s or trial and error. To improve the model’s performance, we applied a hyperparameter optimization technique to find the best set of hyperparameters. We used a grid search with cross-validation to find the optimal hyperparameters for the XGBoost model. The grid search was performed over a predefined set of hyperparameters, and the best hyperparameters were selected based on the model’s performance on the validation set. The best hyperparameters were then used to train the final model.\n\nfrom functions import compare_json\n\nwith open(\"best_trial_params.json\", \"r\") as f:\n    best_trial_params = json.load(f)\n    \ndifferences = compare_json(model_params, best_trial_params)\n\nparams_tbl = pd.DataFrame(differences)\nparams_tbl.rename(index={'json1_value': 'base parameters', 'json2_value': 'optimized parameters'}, inplace=True)\nprint(params_tbl)\n\n                      max_depth     gamma  subsample  colsample_bytree  \\\nbase parameters               6  0.100000   0.800000          0.800000   \noptimized parameters          5  0.304548   0.781029          0.922528   \n\n                      learning_rate  n_estimators  \nbase parameters            0.100000           100  \noptimized parameters       0.239488           490  \n\n\n\n# Fit the model on the entire dataset\n# Initialize the XGBClassifier without early stopping here\n\n# Load the best trial parameters from a JSON file.\nwith open(\"best_trial_params.json\", \"r\") as f:\n    best_trial_params = json.load(f)\n\nstart = time.time()\n\nclf = xgb.XGBClassifier(\n    tree_method=\"hist\",\n    max_depth=best_trial_params[\"max_depth\"],\n    min_child_weight=best_trial_params[\"min_child_weight\"],\n    gamma=best_trial_params[\"gamma\"],\n    subsample=best_trial_params[\"subsample\"],\n    colsample_bytree=best_trial_params[\"colsample_bytree\"],\n    learning_rate=best_trial_params[\"learning_rate\"],\n    n_estimators=best_trial_params[\"n_estimators\"],\n)\n\nclf.fit(X, y)\nend= time.time()\nmodeling_time = end - start\nprint(f\"\\nTraining time: {modeling_time} seconds\\n\")\n\n# Calculate and print the training accuracy\ntraining_accuracy = clf.score(X, y)\nprint(f\"Training accuracy: {training_accuracy * 100:.2f}%\")\n\n\nTraining time: 0.25516271591186523 seconds\n\nTraining accuracy: 99.99%\n\n\n\n# Predict the target for new data\ny_pred = clf.predict(X_new)\n\n# Probability estimates\nstart = time.time()\ny_pred_proba = clf.predict_proba(X_new)\nend = time.time()\nprediction_time = end - start\nprint(f\"\\nPrediction time: {prediction_time} seconds\\n\")\n\nprint(f\"test_rankings = {np.array(test_rankings)[:6]}, \\ny_pred = {y_pred[:6]}, \\ny_pred_proba = \\n{y_pred_proba[:6]}\")\n\n\nPrediction time: 0.004670143127441406 seconds\n\ntest_rankings = [1 1 1 1 1 0], \ny_pred = [1 0 1 1 1 0], \ny_pred_proba = \n[[1.6081333e-04 9.9983919e-01]\n [9.9890882e-01 1.0912113e-03]\n [4.4107437e-06 9.9999559e-01]\n [3.3518672e-03 9.9664813e-01]\n [3.7789345e-05 9.9996221e-01]\n [9.8669869e-01 1.3301333e-02]]\n\n\n\nerrors = np.abs(y_pred - np.array(test_rankings))\nambiguousness: np.ndarray = calculate_ambiguousness(y_pred_proba)\ndf = pd.DataFrame({\"Ambiguousness\": ambiguousness, \"Error\": errors, \"Schedules\": test_neighbors, \"Objectives\": test_objectives}).sort_values(by=\"Ambiguousness\")\ndf['Cumulative error rate'] = df['Error'].expanding().mean()\n# Calculate cumulative accuracy\ndf['Cumulative accuracy'] = 1 - df['Cumulative error rate']\ndf.head()\n\n\n\n\n\n\n\n\n\nAmbiguousness\nError\nSchedules\nObjectives\nCumulative error rate\nCumulative accuracy\n\n\n\n\n178\n9.533788e-07\n0\n([5, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,...\n[32.98696226788597, 46.812911422428115]\n0.0\n1.0\n\n\n195\n2.116478e-06\n0\n([5, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n[36.931326939681846, 47.9729600313117]\n0.0\n1.0\n\n\n323\n2.913796e-06\n0\n([5, 0, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,...\n[36.64505906925378, 24.3992956638097]\n0.0\n1.0\n\n\n306\n2.913796e-06\n0\n([4, 5, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,...\n[47.574821046480274, 33.21308206200795]\n0.0\n1.0\n\n\n94\n2.913796e-06\n0\n([7, 0, 0, 0, 0, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0,...\n[40.21605912944083, 26.33525669495404]\n0.0\n1.0\n\n\n\n\n\n\n\n\n\n# Create traces\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df[\"Ambiguousness\"], y=df[\"Error\"],\n                    mode=\"markers\",\n                    name=\"Error\",\n                    marker=dict(size=9),\n                    customdata=df[[\"Schedules\", \"Objectives\"]],\n                    hovertemplate=\n                        \"Ambiguousness: %{x} &lt;br&gt;\" +\n                        \"Error: %{y} &lt;br&gt;\" +\n                        \"Schedules: %{customdata[0][0]} / %{customdata[0][1]} &lt;br&gt;\" +\n                        \"Objectives: %{customdata[1]} &lt;br&gt;\"\n                    ))\n                  \nfig.add_trace(go.Scatter(x=df[\"Ambiguousness\"], y=df[\"Cumulative accuracy\"],\n                    mode=\"lines\",\n                    name=\"Cum. accuracy\",\n                    line = dict(width = 3, dash = 'dash')))\nfig.update_layout(\n    title={\n        'text': f\"Error vs Ambiguousness&lt;/br&gt;&lt;/br&gt;&lt;sub&gt;n={num_test_schedules}&lt;/sub&gt;\",\n        'y': 0.95,  # Keep the title slightly higher\n        'x': 0.02,\n        'xanchor': 'left',\n        'yanchor': 'top'\n    },\n    xaxis_title=\"Ambiguousness\",\n    yaxis_title=\"Error / Accuracy\",\n    hoverlabel=dict(font=dict(color='white')),\n    margin=dict(t=70)  # Add more space at the top of the chart\n)\nfig.show()",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>XGBoost classification model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#results",
    "href": "xgboost-pairwise-ranking.html#results",
    "title": "1  XGBoost classification model for pairwise ranking",
    "section": "1.5 Results",
    "text": "1.5 Results\nWe wanted to test whether an XGBoost classification model could be used to assess and rank the quality of pairs of schedules. For performance benchmarking we use the conventional calculation method utilizing Lindley recursions.\nWe trained the XGBoost ranking model with a limited set of features (schedules) and labels (objectives). The total number of possible schedules is approximately 52.0 million. For training and validation, we sampled 20000 schedules. Generating the feature and label set took a total of 102.707 seconds, with the calculation of objective values accounting for 19.1184 seconds.\nThe model demonstrates strong and consistent performance with high accuracies both for training as well as testing, good generalization and stability. Total training time for the final model was 0.2552 seconds. The evaluation of 1000 test schedules took 0.0047 seconds for the the XGBoost model and 0.8823 for the conventional method, which is an improvement of 188X.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>XGBoost classification model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#discussion",
    "href": "xgboost-pairwise-ranking.html#discussion",
    "title": "1  XGBoost classification model for pairwise ranking",
    "section": "1.6 Discussion",
    "text": "1.6 Discussion\n\ntraining_time = round(modeling_time, 4)\nconventional_time = round(evaluation_time, 4)\nxgboost_time = round(prediction_time, 4)\n\n# Define time values for plotting\ntime_values = np.linspace(0, training_time+0.1, 1000)  # 0 to 2 seconds\n\n# Calculate evaluations for method 1\nmethod1_evaluations = np.where(time_values &gt;= training_time, (time_values - training_time) / xgboost_time * 1000, 0)\n\n# Calculate evaluations for method 2\nmethod2_evaluations = time_values / conventional_time * 1000\n\n# Create line chart\nfig = go.Figure()\n\n# Add method 1 trace\nfig.add_trace(go.Scatter(x=time_values, y=method1_evaluations, mode='lines', name='Ranking model'))\n\n# Add method 2 trace\nfig.add_trace(go.Scatter(x=time_values, y=method2_evaluations, mode='lines', name='Conventional method'))\n\n# Update layout\nfig.update_layout(\n    title=\"Speed comparison between XGBoost ranking model and conventional method\",\n    xaxis_title=\"Time (seconds)\",\n    yaxis_title=\"Number of Evaluations\",\n    legend_title=\"Methods\",\n    template=\"plotly_white\"\n)\n\nfig.show()",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>XGBoost classification model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#timeline",
    "href": "xgboost-pairwise-ranking.html#timeline",
    "title": "1  XGBoost classification model for pairwise ranking",
    "section": "1.7 Timeline",
    "text": "1.7 Timeline\n*This experiment was started on 25-07-2024. The completion date was 28-08-2024.**",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>XGBoost classification model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-pairwise-ranking.html#references",
    "href": "xgboost-pairwise-ranking.html#references",
    "title": "1  XGBoost classification model for pairwise ranking",
    "section": "1.8 References",
    "text": "1.8 References\n\n\n\n\nHo, Y-C, C G Cassandras, C-H Chen, and L Dai. 2000. “Ordinal Optimisation and Simulation.” Journal of the Operational Research Society 51 (4): 490–500. https://doi.org/10.1057/palgrave.jors.2600906.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>XGBoost classification model for pairwise ranking</span>"
    ]
  },
  {
    "objectID": "xgboost-objective-calc.html",
    "href": "xgboost-objective-calc.html",
    "title": "2  XGBoost regression model for objective calculation",
    "section": "",
    "text": "2.1 Objective\nCompare the performance (speed and accuracy) of a surrogate model (XGBoost regressor) with a conventional calculation for appointment scheduling objective function and against a ranking model.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost regression model for objective calculation</span>"
    ]
  },
  {
    "objectID": "xgboost-objective-calc.html#background",
    "href": "xgboost-objective-calc.html#background",
    "title": "2  XGBoost regression model for objective calculation",
    "section": "2.2 Background",
    "text": "2.2 Background\nIn this experiment we’ll develop a Machine Learning model using XGBoost for evaluating a single schedule and let it compete with the conventional method as well as with the ranking model.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost regression model for objective calculation</span>"
    ]
  },
  {
    "objectID": "xgboost-objective-calc.html#hypothesis",
    "href": "xgboost-objective-calc.html#hypothesis",
    "title": "2  XGBoost regression model for objective calculation",
    "section": "2.3 Hypothesis",
    "text": "2.3 Hypothesis\nWe expect a ranking model to be superior in speed compared to a XGBoost regressor model. The XGBoost regressor model will outperform the conventional model in speed.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost regression model for objective calculation</span>"
    ]
  },
  {
    "objectID": "xgboost-objective-calc.html#methodology",
    "href": "xgboost-objective-calc.html#methodology",
    "title": "2  XGBoost regression model for objective calculation",
    "section": "2.4 Methodology",
    "text": "2.4 Methodology\n\n2.4.1 Tools and Materials\nWe use packages from Scikit-learn to prepare training data and evaluate the model and the XGBRegressor interface from the XGBoost library.\n\nimport time\nimport math\nimport json\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold, GridSearchCV\nfrom sklearn.base import clone\nfrom sklearn.metrics import mean_squared_log_error\nimport xgboost as xgb\nfrom xgboost.callback import TrainingCallback\nimport plotly.graph_objects as go\nimport pickle\n\n\n\n2.4.2 Experimental Design\n\nN = 12 # Number of patients\nT = 18 # Number of intervals\nd = 5 # Length of each interval\ns = [0.0, 0.27, 0.28, 0.2, 0.15, 0.1] # Service times distribution\nq = 0.20 # Probability of a scheduled patient not showing up\nw = 0.8 # Weight for the waiting time in objective function\nnum_schedules = 20000 # Number of schedules to sample\n\nWe will create a random set of pairs of neighboring schedules with \\(N = 12\\) patients and \\(\\ T = 18\\) intervals of length \\(d = 5\\).\nA neighbor of a schedule x is considered a schedule x’ where single patients have been shifted one interval to the left. Eg: ([2,1,1,2], [1,2,0,3]) are neighbors and ([2,1,1,2], [2,1,3,0]) are not, because [1,2,0,3] - [2,1,1,2] = [-1, 1, -1, 1] and [2,1,3,0] - [2,1,1,2] = [0, 0, 2, -2].\nService times will have a discrete distribution. The probability of a scheduled patient not showing up will be \\(q = 0.2\\).\nThe objective function will be the weighted average of the total waiting time of all patients and overtime. First all the paired schedules will be evaluated by computing the objective value. Then an XGBoost regressor model for predicting objective values will be trained and evaluated.\nThe model will be validated using a new sample of paired schedules the model has never seen (not in the training or the evaluation phase). All the objective values will be computed and the computation time will be recorded. Using the regressor model the objectives will be predicted and the prediciotn time will be measured. The predicted values will be compared to the actual values and the accuracy of the model will be assessed.\nIn order to be able to compare the objective regressor to the ranking model in the other experiment we will also predict the rankings of the paired schedules and compare them to the actual rankings. An opaqueness measure will be calculated for each prediction to assess the confidence of the model and relate it to accuracy.\n\n\n2.4.3 Variables\n\nIndependent Variables: A list of tuples with pairs of neighboring schedules.\nDependent Variables:\n\nA list of tuples with the objective values for each pair of neighboring schedules.\nLists with rankings for each tuple of pairwise schedules. Eg: If the rank for ([2,1,1], [1,1,2]) equals 0 this means that the schedule with index 0 ([2,1,1]) has the lowest objective value.\n\n\n\n\n2.4.4 Data Collection\nThe data set will be generated using simulation in which random samples will be drawn from the population of all possible schedules. For each sample a random neighboring schedule will be created.\n\n\n2.4.5 Sample Size and Selection\nSample Size: The total population size equals \\({{N + T -1}\\choose{N}} \\approx\\) 52.0 mln. For this experiment we will be using a relatively small sample of 20000 schedules.\nSample Selection: The samples will be drawn from a lexicographic order of possible schedules in order to accurately reflect the combinatorial nature of the problem and to ensure unbiased sampling from the entire combinatorial space.\n\n\n2.4.6 Data Collection\nThe data sample has been generated in an earlier experiment using simulation in which random samples were drawn from the population of all possible schedules.\n\n# Load the data from the pickle file\nwith open('neighbors_and_objectives.pkl', 'rb') as f:\n    data = pickle.load(f)\n\n# Extract the variables from the loaded data\nneighbors_list = data['neighbors_list']\nobjectives_list = data['objectives']\nrankings_list = data['rankings']\n\nprint(\"Data loaded successfully.\\n\")\nfor neigbors in neighbors_list[:2]: print(neigbors, \"\\n\")\nfor objectives in objectives_list[:2]: print(objectives, \"\\n\")\nfor rankings in rankings_list[:2]: print(rankings, \"\\n\")\n\nData loaded successfully.\n\n([5, 2, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]) \n\n([6, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [7, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]) \n\n[36.795289714979525, 31.803646314816802] \n\n[49.47536904144756, 56.955217267557444] \n\n1 \n\n0 \n\n\n\nThe experiment involves multiple steps, beginning with data preparation and concluding with model evaluation.The diagram below illustrates the sequence of steps.\n\n\n\n\n\ngraph TD\n    A[\"From population\"] --&gt;|\"Sample\"| B[\"Random subset\"]\n    B --&gt; |Create neighbors| C[\"Features: Schedule pairs\"]\n    C --&gt; |Calculate objectives| D[\"Labels: Objective values\"]\n    D --&gt; |Flatten lists| E[\"Features and labels\"]\n    E --&gt; |\"Split\"| F[\"Training set\"]\n    E --&gt; |\"Split\"| G[\"Test set\"]\n    F --&gt; |\"Train\"| H[\"Model\"]\n    H[\"Model\"] --&gt; |\"Apply\"| G[\"Test set\"]\n    G[\"Test set\"] --&gt; |\"Evaluate\"| I[\"Performance\"]\n\n\n\n\n\n\n\nPrepare the data for training the XGBoost regressor model.\n\n\n# Transform the schedule and objective data into lists of NumPy arrays\nX = [item for tup in neighbors_list for item in tup]\ny = [item for tup in objectives_list for item in tup]\nprint(f\"Flattened neighbors list: {X[:3]}\")\nprint(f\"Flattened objectives list: {y[:3]}\")\nprint(f\"Number of schedules: {len(X)}\")\n\nFlattened neighbors list: [[5, 2, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [6, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]\nFlattened objectives list: [36.795289714979525, 31.803646314816802, 49.47536904144756]\nNumber of schedules: 40000\n\n\n\nRun hyperparameter optimization for the XGBoost regressor model and record the time taken to find the optimal hyperparameters.\n\n\n# #=========================================================================\n# # XGBoost regression: \n# # Parameters: \n# # n_estimators  \"Number of gradient boosted trees. Equivalent to number \n# #                of boosting rounds.\"\n# # learning_rate \"Boosting learning rate (also known as “eta”)\"\n# # max_depth     \"Maximum depth of a tree. Increasing this value will make \n# #                the model more complex and more likely to overfit.\" \n# #=========================================================================\n# regressor=xgb.XGBRegressor(eval_metric='rmsle')\n# \n# #=========================================================================\n# # exhaustively search for the optimal hyperparameters\n# #=========================================================================\n# from sklearn.model_selection import GridSearchCV\n# # set up our search grid\n# param_grid = {\"max_depth\":    [4, 5, 7],\n#               \"n_estimators\": [500, 700, 900],\n#               \"learning_rate\": [0.05, 0.1, 0.15]}\n# \n# # try out every combination of the above values\n# start = time.time()\n# search = GridSearchCV(regressor, param_grid, cv=5, verbose=3, n_jobs=-1).fit(X_train, y_train)\n# end = time.time()\n# hyper_search_time = end - start\n# print(f'Hyperparameter optimization time: {hyper_search_time}')\n# \n# print(\"The best hyperparameters are \",search.best_params_)\n\n\nTrain XGBoost regressor model to predict objective values from given schedules and measure training time.\n\n\nclass CustomCallback(TrainingCallback):\n    def __init__(self, period=10):\n        self.period = period\n\n    def after_iteration(self, model, epoch, evals_log):\n        if (epoch + 1) % self.period == 0:\n            print(f\"Epoch {epoch}, Evaluation log: {evals_log['validation_0']['rmse'][epoch]}\")\n        return False\n\ndef fit_and_score(estimator, X_train, X_test, y_train, y_test):\n    \"\"\"Fit the estimator on the train set and score it on both sets\"\"\"\n    estimator.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=0)\n    \n    train_score = estimator.score(X_train, y_train)\n    test_score = estimator.score(X_test, y_test)\n\n    return estimator, train_score, test_score\n\n# Ensure that X and y are numpy arrays (convert if needed)\nX = np.array(X)  # Replace this with actual data\ny = np.array(y)  # Replace this with actual data\n\n# Check the shapes of X and y to ensure compatibility\nprint(f\"X shape: {X.shape}, y shape: {y.shape}\")\n\n# Use KFold instead of StratifiedKFold, as stratification is not necessary for regression\ncv = KFold(n_splits=5, shuffle=True, random_state=94)\n\n# Load the best trial parameters from a JSON file\nwith open(\"best_regressor_trial_params.json\", \"r\") as f:\n    model_params = json.load(f)\n\n# Initialize the XGBRegressor with the loaded parameters\nregressor = xgb.XGBRegressor(\n    tree_method=\"hist\",\n    max_depth=model_params[\"max_depth\"],\n    min_child_weight=model_params[\"min_child_weight\"],\n    gamma=model_params[\"gamma\"],\n    subsample=model_params[\"subsample\"],\n    colsample_bytree=model_params[\"colsample_bytree\"],\n    learning_rate=model_params[\"learning_rate\"],\n    n_estimators=model_params[\"n_estimators\"],\n    callbacks=[CustomCallback(period=50)],\n)\n\nprint(\"Params: \")\nfor key, value in model_params.items():\n    print(f\" {key}: {value}\")\n\nstart = time.time()\nresults = []\n\nfor train_idx, test_idx in cv.split(X, y):\n    X_train, X_test = X[train_idx], X[test_idx]\n    y_train, y_test = y[train_idx], y[test_idx]\n    \n    est, train_score, test_score = fit_and_score(\n        clone(regressor), X_train, X_test, y_train, y_test\n    )\n    results.append((est, train_score, test_score))\nend = time.time()\ntraining_time = end - start\nprint(f\"\\nTraining time: {training_time} seconds\\n\")\n\nX shape: (40000, 18), y shape: (40000,)\nParams: \n max_depth: 7\n min_child_weight: 8\n gamma: 0.014781560271184178\n subsample: 0.939540319301831\n colsample_bytree: 0.981185586324404\n learning_rate: 0.19710059853968986\n n_estimators: 339\nEpoch 49, Evaluation log: 0.7904632985901903\nEpoch 99, Evaluation log: 0.5651728557095406\nEpoch 149, Evaluation log: 0.4825846625877252\nEpoch 199, Evaluation log: 0.43582872251081106\nEpoch 249, Evaluation log: 0.4057554323337808\nEpoch 299, Evaluation log: 0.3923697352497704\nEpoch 49, Evaluation log: 0.8593525169731582\nEpoch 99, Evaluation log: 0.6291440626421113\nEpoch 149, Evaluation log: 0.5704605093071775\nEpoch 199, Evaluation log: 0.5251938838894936\nEpoch 249, Evaluation log: 0.5034384392731129\nEpoch 299, Evaluation log: 0.49434227397340663\nEpoch 49, Evaluation log: 0.8069337037072823\nEpoch 99, Evaluation log: 0.5863068737697714\nEpoch 149, Evaluation log: 0.5062475068548022\nEpoch 199, Evaluation log: 0.4666002722724301\nEpoch 249, Evaluation log: 0.4394734815393961\nEpoch 299, Evaluation log: 0.4170614595629969\nEpoch 49, Evaluation log: 0.7882364863216375\nEpoch 99, Evaluation log: 0.5685295296271188\nEpoch 149, Evaluation log: 0.48875222857606465\nEpoch 199, Evaluation log: 0.4489603043771849\nEpoch 249, Evaluation log: 0.4265027140448827\nEpoch 299, Evaluation log: 0.4074472308168561\nEpoch 49, Evaluation log: 0.894009977171125\nEpoch 99, Evaluation log: 0.6677567448053304\nEpoch 149, Evaluation log: 0.5868060825695018\nEpoch 199, Evaluation log: 0.5432130414057025\nEpoch 249, Evaluation log: 0.5166061646056966\nEpoch 299, Evaluation log: 0.50166185616661\n\nTraining time: 3.7627298831939697 seconds\n\n\n\n\n# Print results\nfor i, (est, train_score, test_score) in enumerate(results):\n    print(f\"Fold {i+1} - Train Score (R²): {train_score:.4f}, Test Score (R²): {test_score:.4f}\")\n\nFold 1 - Train Score (R²): 0.9992, Test Score (R²): 0.9987\nFold 2 - Train Score (R²): 0.9991, Test Score (R²): 0.9980\nFold 3 - Train Score (R²): 0.9992, Test Score (R²): 0.9985\nFold 4 - Train Score (R²): 0.9990, Test Score (R²): 0.9986\nFold 5 - Train Score (R²): 0.9991, Test Score (R²): 0.9978\n\n\n\n# regressor=xgb.XGBRegressor(learning_rate = search.best_params_[\"learning_rate\"],\n#                        n_estimators  = search.best_params_[\"n_estimators\"],\n#                        max_depth     = search.best_params_[\"max_depth\"],\n#                        eval_metric='rmsle')\n# \n# start = time.time()\n# regressor.fit(X_train, y_train)\n# end = time.time()\n# training_time = end - start\n# print(f\"\\nTraining time: {training_time} seconds\\n\")\n\n\nUse the trained model to predict the objective values for the test set and calculate the Mean Absolute Percentage Error (MAPE) between the predicted and true values.\n\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize the XGBRegressor with the loaded parameters\nregressor = xgb.XGBRegressor(\n    tree_method=\"hist\",\n    max_depth=model_params[\"max_depth\"],\n    min_child_weight=model_params[\"min_child_weight\"],\n    gamma=model_params[\"gamma\"],\n    subsample=model_params[\"subsample\"],\n    colsample_bytree=model_params[\"colsample_bytree\"],\n    learning_rate=model_params[\"learning_rate\"],\n    n_estimators=model_params[\"n_estimators\"],\n)\n\nregressor.fit(X_train, y_train)\nregressor.save_model('models/regressor.json')\npredictions = regressor.predict(X_test)\n\n# Calculate Mean Absolute Percentage Error (MAPE)\ndef mean_absolute_percentage_error(y_true, y_pred):\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n\nmape = mean_absolute_percentage_error(y_test, predictions)\nprint(f'MAPE: {mape:.2f}%')\n\nMAPE: 0.70%\n\n\n\n# Create the scatter plot\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=y_test, \n    y=predictions, \n    mode='markers',\n    marker=dict(color='blue'),\n    name='Predictions vs. true values'\n))\nfig.add_trace(go.Scatter(\n    x=[0, max(max(y_test), max(predictions))],\n    y=[0, max(max(y_test), max(predictions))],\n    mode='lines',\n    line=dict(color='tomato', dash='dash'),\n    name='Base line',\n))\n\n# Add axis labels and a title\nfig.update_layout(\n    title='Predictions vs. true values',\n    xaxis_title='True values',\n    yaxis_title='Predictions',\n    showlegend=True\n)\n\n# Show the plot\nfig.show()\n\n                                                \n\n\n\n\n2.4.7 Validation\n\nCreate validation set with pairs of neighboring schedules and calculate their objectives. Measure calculation time.\n\n\nfrom functions import random_combination_with_replacement, create_neighbors_list, calculate_objective\n\nnum_test_schedules = 1000\n\ntest_schedules = random_combination_with_replacement(T, N, num_test_schedules)\ntest_neighbors = [create_neighbors_list(test_schedule) for test_schedule in test_schedules] # This can be done in parellel to improve speed\n\nprint(f\"Sampled: {len(test_schedules)} schedules\\n\")\n\n# Start time measeurement for the evaluation\nstart = time.time()\ntest_objectives_schedule_1 = [w * calculate_objective(test_neighbor[0], s, d, q)[0] + (1 - w) * calculate_objective(test_neighbor[0], s, d, q)[1] for test_neighbor in test_neighbors]\nend = time.time()\nevaluation_time = end - start\nprint(f\"Evaluation time: {evaluation_time} seconds,\\nNumber of evaluated schedules: {len(test_schedules)}\\n\")\ntest_objectives_schedule_2 = [w * calculate_objective(test_neighbor[1], s, d, q)[0] + (1 - w) * calculate_objective(test_neighbor[1], s, d, q)[1] for test_neighbor in test_neighbors]\ntest_rankings = [0 if test_obj &lt; test_objectives_schedule_2[i] else 1 for i, test_obj in enumerate(test_objectives_schedule_1)]\n\n# Combine the objectives for each pair for later processing\ntest_objectives = [[test_obj, test_objectives_schedule_2[i]] for i, test_obj in enumerate(test_objectives_schedule_1)]\n\n\nfor i in range(6):\n    print(f\"Neighbors: {test_neighbors[i]},\\nObjectives: {test_objectives[i]}, Ranking: {test_rankings[i]}\\n\")\n\nTotal number of combinations: 51895935\nSampled: 1000 schedules\n\nEvaluation time: 0.9275479316711426 seconds,\nNumber of evaluated schedules: 1000\n\nNeighbors: ([3, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [3, 6, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]),\nObjectives: [40.694414285925404, 42.33452306644527], Ranking: 0\n\nNeighbors: ([6, 2, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [5, 2, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0]),\nObjectives: [40.52532448251404, 30.21842011085515], Ranking: 1\n\nNeighbors: ([7, 1, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\nObjectives: [53.436394118246405, 58.72955145102385], Ranking: 0\n\nNeighbors: ([5, 1, 2, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\nObjectives: [28.558868023184317, 33.3131503296926], Ranking: 0\n\nNeighbors: ([6, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [7, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0]),\nObjectives: [35.97839704344874, 43.72724040229321], Ranking: 0\n\nNeighbors: ([3, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [3, 5, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]),\nObjectives: [37.74187323763362, 41.55014910759041], Ranking: 0\n\n\n\n\nPredict for each schedule in the validation set the objectives using the regressor model. Measure prediction time.\n\n\ndef predict_objective(neighbors):\n    neighbors_array = [np.array(neighbor) for neighbor in neighbors] # Convert schedules to a NumPy array\n    neighbors_array = np.vstack(neighbors_array)\n    predictions = regressor.predict(neighbors_array)\n    return predictions\n\n# Start time measurement for the prediction\nstart = time.time()\npredictions = regressor.predict(test_schedules)\nend = time.time()\nprediction_time = end - start\nprint(f\"Prediction time: {prediction_time},\\nNumber of predicted schedules: {len(predictions)}\\n\")\n\n# Calculate the rankings based on the predicted objectives\npredictions = [predict_objective(neighbors) for neighbors in test_neighbors]\npred_rankings = [np.argmin(objectives) for objectives in predictions]\nfor i in range(6):\n    print(f\"Neighbors: {test_neighbors[i]},\\nPredictions: {predictions[i]}, Ranking: {pred_rankings[i]}\\n\")\n\nPrediction time: 0.005063056945800781,\nNumber of predicted schedules: 1000\n\nNeighbors: ([3, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [3, 6, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]),\nPredictions: [40.751194 42.09523 ], Ranking: 0\n\nNeighbors: ([6, 2, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [5, 2, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0]),\nPredictions: [40.428585 30.058203], Ranking: 1\n\nNeighbors: ([7, 1, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\nPredictions: [53.225758 58.936073], Ranking: 0\n\nNeighbors: ([5, 1, 2, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\nPredictions: [28.124483 33.241272], Ranking: 0\n\nNeighbors: ([6, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [7, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0]),\nPredictions: [36.403072 43.28909 ], Ranking: 0\n\nNeighbors: ([3, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [3, 5, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]),\nPredictions: [37.879795 41.40114 ], Ranking: 0\n\n\n\n\nCalculate opaqueness and accuracy comparing true and predicted rankings.\n\nOpaqueness is calculated using the formula for entropy:\n\\[\nH(X) = - \\sum_{i} p(x_i) \\log_b p(x_i)\n\\]\nWhere in our case:\n\n\\(H(X)\\) is the opaqueness of the random variable \\(X\\) - the set of predicted normalized objective values for each of the paired schedules,\n\\(p(x_i)\\) is the normalized outcome \\(x_i\\),\n\\(\\log_b\\) is the logarithm with base \\(b\\) (here \\(\\log_2\\) as we have two predicted values),\nThe sum is taken over all possible outcomes of \\(X\\).\n\n\nfrom functions import calculate_opaqueness\n\nerrors = np.abs(np.array(test_rankings) - pred_rankings)\naccuracy = 1 - errors.mean()\nprint(f\"Accuracy = {accuracy}\")\n\n# Calculate the opaqueness of each prediction\nnormalised_predictions = [prediction / np.sum(prediction) for prediction in predictions]\nopaqueness = [calculate_opaqueness(vector) for vector in normalised_predictions]\n\nAccuracy = 0.964\n\n\n\npredicted_values_left = [prediction[0] for prediction in predictions]\n\n\ndf = pd.DataFrame({\"Opaqueness\": opaqueness, \"Error\": errors, \"Predictions\": predictions}).sort_values(by=\"Opaqueness\")\ndf['Cumulative error rate'] = df['Error'].expanding().mean()\n# Calculate cumulative accuracy\ndf['Cumulative accuracy'] = 1 - df['Cumulative error rate']\nprint(df.head())\n\n# Create traces\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df[\"Opaqueness\"], y=df[\"Error\"],\n                    mode=\"markers\",\n                    name=\"Error\",\n                    marker=dict(size=9),\n                    text=[f'{prediction}' for prediction in df[\"Predictions\"]],))\nfig.add_trace(go.Scatter(x=df[\"Opaqueness\"], y=df[\"Cumulative accuracy\"],\n                    mode=\"lines\",\n                    name=\"Cum. accuracy\",\n                    line = dict(width = 3, dash = 'dash')))\nfig.update_layout(\n    title={\n        'text': f\"Error vs Opaqueness&lt;/br&gt;&lt;/br&gt;&lt;sub&gt;n={num_test_schedules}&lt;/sub&gt;\",\n        'y': 0.95,  # Keep the title slightly higher\n        'x': 0.02,\n        'xanchor': 'left',\n        'yanchor': 'top'\n    },\n    xaxis_title=\"Opaqueness\",\n    yaxis_title=\"Error / Accuracy\",\n    hoverlabel=dict(font=dict(color='white')),\n    margin=dict(t=70)  # Add more space at the top of the chart\n)\nfig.show()\n\n     Opaqueness  Error             Predictions  Cumulative error rate  \\\n217    0.957615      0  [27.678026, 16.920582]                    0.0   \n86     0.958376      0    [36.3731, 22.338028]                    0.0   \n414    0.959473      0  [37.424866, 23.137482]                    0.0   \n887    0.962102      0  [36.267036, 22.790138]                    0.0   \n248    0.964931      0    [35.9493, 23.003693]                    0.0   \n\n     Cumulative accuracy  \n217                  1.0  \n86                   1.0  \n414                  1.0  \n887                  1.0  \n248                  1.0",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost regression model for objective calculation</span>"
    ]
  },
  {
    "objectID": "xgboost-objective-calc.html#results",
    "href": "xgboost-objective-calc.html#results",
    "title": "2  XGBoost regression model for objective calculation",
    "section": "2.5 Results",
    "text": "2.5 Results\nWe wanted to test whether an XGBoost regressor model could be used to assess the objective values schedules. For performance benchmarking we use the conventional calculation method utilizing Lindley recursions.\nWe trained the XGBoost regressor model with a limited set of features (schedules) and labels (objectives). The total number of possible schedules is approximately 52.0 million. For training and validation, we sampled 20000 schedules.\nThe model demonstrates strong and consistent performance with high prediction ability both for training as well as testing, good generalization and stability. Total training time for the final model was 3.7627 seconds. The evaluation of 1000 test schedules took 0.0051 seconds for the the XGBoost model and 0.9275 for the conventional method, which is an improvement of 183X.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost regression model for objective calculation</span>"
    ]
  },
  {
    "objectID": "xgboost-objective-calc.html#discussion",
    "href": "xgboost-objective-calc.html#discussion",
    "title": "2  XGBoost regression model for objective calculation",
    "section": "2.6 Discussion",
    "text": "2.6 Discussion\n\ntraining_time = round(training_time, 4)\nconventional_time = round(evaluation_time, 4)\nxgboost_time = round(prediction_time, 4)\n\n# Define time values for plotting\ntime_values = np.linspace(0, training_time+0.1, 1000)  # 0 to 2 seconds\n\n# Calculate evaluations for method 1\nmethod1_evaluations = np.where(time_values &gt;= training_time, (time_values - training_time) / xgboost_time * 1000, 0)\n\n# Calculate evaluations for method 2\nmethod2_evaluations = time_values / conventional_time * 1000\n\n# Create line chart\nfig = go.Figure()\n\n# Add method 1 trace\nfig.add_trace(go.Scatter(x=time_values, y=method1_evaluations, mode='lines', name='Ranking model'))\n\n# Add method 2 trace\nfig.add_trace(go.Scatter(x=time_values, y=method2_evaluations, mode='lines', name='Conventional method'))\n\n# Update layout\nfig.update_layout(\n    title=\"Speed comparison between XGBoost regressor model and conventional method\",\n    xaxis_title=\"Time (seconds)\",\n    yaxis_title=\"Number of Evaluations\",\n    legend_title=\"Methods\",\n    template=\"plotly_white\"\n)\n\nfig.show()",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost regression model for objective calculation</span>"
    ]
  },
  {
    "objectID": "xgboost-objective-calc.html#timeline",
    "href": "xgboost-objective-calc.html#timeline",
    "title": "2  XGBoost regression model for objective calculation",
    "section": "2.7 Timeline",
    "text": "2.7 Timeline\nThis experiment was started on 30-08-2024. The expected completion date is 09-09-2024.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost regression model for objective calculation</span>"
    ]
  },
  {
    "objectID": "xgboost-objective-calc.html#references",
    "href": "xgboost-objective-calc.html#references",
    "title": "2  XGBoost regression model for objective calculation",
    "section": "2.8 References",
    "text": "2.8 References\nCite all sources that informed your experiment, including research papers, datasets, and tools. This section ensures that your work is properly grounded in existing research and that others can trace the origins of your methods and data.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>XGBoost regression model for objective calculation</span>"
    ]
  },
  {
    "objectID": "local-search-regressor.html",
    "href": "local-search-regressor.html",
    "title": "3  Local search with trained XGBoost regressor model",
    "section": "",
    "text": "3.1 Objective\nTest the working and performance of a previously trained XGBoost Regressor model in a local search application.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Local search with trained XGBoost regressor model</span>"
    ]
  },
  {
    "objectID": "local-search-regressor.html#background",
    "href": "local-search-regressor.html#background",
    "title": "3  Local search with trained XGBoost regressor model",
    "section": "3.2 Background",
    "text": "3.2 Background\nIn previous experiments, we trained an XGBoost Regressor model to predict the objective values of neighboring schedules. In this experiment, we will use the trained models to perform a local search to find the best schedule.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Local search with trained XGBoost regressor model</span>"
    ]
  },
  {
    "objectID": "local-search-regressor.html#hypothesis",
    "href": "local-search-regressor.html#hypothesis",
    "title": "3  Local search with trained XGBoost regressor model",
    "section": "3.3 Hypothesis",
    "text": "3.3 Hypothesis\nThe XGBoost Regressor model will be able to efficiently guide the local search algorithm to find a schedule with a lower objective value than the initial schedule.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Local search with trained XGBoost regressor model</span>"
    ]
  },
  {
    "objectID": "local-search-regressor.html#methodology",
    "href": "local-search-regressor.html#methodology",
    "title": "3  Local search with trained XGBoost regressor model",
    "section": "3.4 Methodology",
    "text": "3.4 Methodology\n\n3.4.1 Tools and Materials\n\nimport numpy as np\nfrom itertools import chain, combinations\nimport sys\nfrom math import comb  # Available in Python 3.8 and later\nimport xgboost as xgb\nfrom functions import calculate_objective\nimport pickle\n\n\n\n3.4.2 Experimental Design\nWe will use the trained XGBoost Regressor model to guide a local search algorithm to find the best schedule. The local search algorithm will start with an initial schedule and iteratively explore the neighborhood of the current schedule to find a better one. As an initial schedule, we will use the schedule with the lowest objective value from the training dataset that was used to train the XGBoost Regressor model.\n\n\n3.4.3 Variables\n\nIndependent Variables:\n\nThe trained XGBoost Regressor model.\n\nDependent Variables:\n\nSpeed, accuracy, and convergence of the local search algorithm.\n\n\n\n\n3.4.4 Data Collection\nWe will use the training dataset to initialize the local search algorithm.\n\n\n3.4.5 Sample Size and Selection\n\nN = 12 # Number of patients\nT = 18 # Number of intervals\nd = 5 # Length of each interval\ns = [0.0, 0.27, 0.28, 0.2, 0.15, 0.1] # Service times distribution\nq = 0.20 # Probability of a scheduled patient not showing up\nw = 0.8 # Weight for the waiting time in objective function\nnum_schedules = 20000 # Number of schedules to sample\n\n\n\n3.4.6 Experimental Procedure\n\n\nThe local search algorithm will follow the steps outlined below:\n\nStart with the best solution found so far \\(\\{x^*, C(x^*)\\}\\) from the training set.\nSet \\(T\\) to the length of the vector \\(x^*\\).\nDefine the vectors \\(V^*\\) as follows:\n\\[\n\\left\\{\n\\begin{array}{c}\n\\vec{v_1}, \\\\\n\\vec{v_2}, \\\\\n\\vec{v_3}, \\\\\n\\vdots \\\\\n\\vec{v_{T-1}}, \\\\\n\\vec{v_T} \\\\\n\\end{array}\n\\right\\} =\n\\left\\{\n\\begin{array}{c}\n(-1, 0,...., 0, 1), \\\\\n(1, -1, 0,...., 0), \\\\\n(0, 1, -1,...., 0), \\\\\n\\vdots \\\\\n(0,...., 1, -1, 0), \\\\\n(0,...., 0, 1, -1) \\\\\n\\end{array}\n\\right\\}\n\\]\nDefine the vectors \\(U_t\\) as all possible non-empty subsets of the set \\(V^*\\) such that \\(|U_t| = t\\), \\(t \\in \\{1,2, \\dots,T\\}\\).\nDefine the neighborhood of \\(x\\) as all vectors of the form \\(x + u_{t1}+\\dots+u_{tk}\\) with \\(u_{t1},\\dots,u_{tk} \\in U_t\\).\nSet \\(t = 1\\).\nGenerate the neighborhood of \\(x^*\\). For each vector \\(y\\) in the neighborhood of \\(x^*\\):\n\nPredict \\(C(y)\\).\nIf \\(C(y) &lt; C(x^*)\\), set \\(x^* = y\\) and go to 7.\n\nIf \\(t \\leq T\\), set \\(t = t + 1\\) and go to 7.\nReturn \\(x^*\\).\n\n\n\n\n\n\n\n\nFigure 3.1: Local search algorithm",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Local search with trained XGBoost regressor model</span>"
    ]
  },
  {
    "objectID": "local-search-regressor.html#results",
    "href": "local-search-regressor.html#results",
    "title": "3  Local search with trained XGBoost regressor model",
    "section": "3.5 Results",
    "text": "3.5 Results\n\n3.5.1 Load best solution from training dataset\n\n# Load the best solution from the training dataset\nwith open('neighbors_and_objectives.pkl', 'rb') as f:\n    data = pickle.load(f)\n    \nprint(f\"The data has following keys: {[key for key in data.keys()]}\")\n\n# Step 1: Flatten the objectives into a 1D array\nflattened_data = [value for sublist in data['objectives'] for value in sublist]\n\n# Step 2: Find the index of the minimum value\nmin_index = np.argmin(flattened_data)\n\n# Step 3: Convert that index back to the original 2D structure\nrow_index = min_index // 2  # Assuming each inner list has 2 values\ncol_index = min_index % 2\n\nprint(f\"The minimum objective value is at index [{row_index}][{col_index}].\\nThis is schedule: {data['neighbors_list'][row_index][col_index]} with objective value {data['objectives'][row_index][col_index]}.\")\n\n# Set the initial schedule to the best solution from the training dataset\ninitial_schedule = data['neighbors_list'][row_index][col_index]\nN = sum(initial_schedule)\nT = len(initial_schedule)\n\nThe data has following keys: ['neighbors_list', 'objectives', 'rankings']\nThe minimum objective value is at index [11407][1].\nThis is schedule: [3, 1, 2, 2, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0] with objective value 12.313507053448905.\n\n\n\n\n3.5.2 Set T to the length of the initial schedule\n\nT = len(initial_schedule)\n\n\n\n3.5.3 Define the vectors \\(V^*\\)\n\ndef get_v_star(t):\n    # Create an initial vector 'u' of zeros with length 't'\n    u = np.zeros(t, dtype=int)\n    # Set the first element of vector 'u' to -1\n    u[0] = -1\n    # Set the last element of vector 'u' to 1\n    u[-1] = 1\n    # Initialize the list 'v_star' with the initial vector 'u'\n    v_star = [u]\n    # Loop over the length of 'u' minus one times\n    for i in range(len(u) - 1):\n        # Append the last element of 'u' to the front of 'u'\n        u = np.append(u[-1], u)\n        # Remove the last element of 'u' to maintain the same length\n        u = np.delete(u, -1)\n        # Append the updated vector 'u' to the list 'v_star'\n        v_star.append(u)\n    # Convert the list of vectors 'v_star' into a NumPy array and return it\n    return(np.array(v_star))\n\n# Example of function call:\n# This will create a 4x4 matrix where each row is a cyclically shifted version of the first row\nget_v_star(4)\n\narray([[-1,  0,  0,  1],\n       [ 1, -1,  0,  0],\n       [ 0,  1, -1,  0],\n       [ 0,  0,  1, -1]])\n\n\n\n\n3.5.4 Define the vectors \\(U_t\\)\n\ndef powerset(iterable, size=1):\n    \"powerset([1,2,3], 2) --&gt; (1,2) (1,3) (2,3)\"\n    return [[i for i in item] for item in combinations(iterable, size)]\n  \nx = initial_schedule\n\n# Generate a matrix 'v_star' using the 'get_v_star' function\nv_star = get_v_star(T)\n\n# Generate all possible non-empty subsets (powerset) of the set {0, 1, 2, ..., t-1}\n# 'ids' will be a list of tuples, where each tuple is a subset of indices\nsize = 2\nids = powerset(range(T), size)\nlen(ids)\nids[:T]\n\n[[0, 1],\n [0, 2],\n [0, 3],\n [0, 4],\n [0, 5],\n [0, 6],\n [0, 7],\n [0, 8],\n [0, 9],\n [0, 10],\n [0, 11],\n [0, 12],\n [0, 13],\n [0, 14],\n [0, 15],\n [0, 16],\n [0, 17],\n [1, 2]]\n\n\n\n\n3.5.5 Define the neighborhood of \\(x\\)\n\nv_star = get_v_star(T)\n\ndef get_neighborhood(x, v_star, ids, verbose=False):\n    x = np.array(x)\n    p = 50\n    if verbose:\n        print(f\"Printing every {p}th result\")\n    # Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'\n    neighborhood = []\n    # Loop over all possible non-empty subsets of indices\n    for i in range(len(ids)):\n        # Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'\n        neighbor = np.zeros(len(x), dtype=int)\n        # Loop over all indices in 'ids[i]'\n        for j in range(len(ids[i])):\n            if verbose:\n                print(f\"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}\")\n            # Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'\n            neighbor += v_star[ids[i][j]]\n        # Append the vector 'x' plus 'neighbor' to the list 'neighborhood'\n        x_n = x + neighbor\n        if i%p==0:\n            if verbose:\n                print(f\"x, x', delta:\\n{x},\\n{x_n},\\n{neighbor}\\n----------------- \")\n        neighborhood.append(x_n)\n    \n    # Convert the list 'neighborhood' into a NumPy array\n    neighborhood = np.array(neighborhood)\n    if verbose:\n        print(f\"Size of raw neighborhood: {len(neighborhood)}\")\n    # Create a mask for rows with negative values\n    mask = ~np.any(neighborhood &lt; 0, axis=1)\n    # Filter out rows with negative values using the mask\n    if verbose:\n        print(f\"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.\")\n    filtered_neighborhood = neighborhood[mask]\n    if verbose:\n        print(f\"Size of filtered neighborhood: {len(filtered_neighborhood)}\")\n    return filtered_neighborhood\n\n# Example of function call:\n# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'\ntest_nh = get_neighborhood(x, v_star, ids)\nprint(f\"All neighborhoods with {size} patients switched:\\n x = {np.array(x)}: \\n {test_nh}\")\n\nAll neighborhoods with 2 patients switched:\n x = [3 1 2 2 1 0 0 1 0 1 0 0 0 0 0 0 1 0]: \n [[3 0 2 2 1 0 0 1 0 1 0 0 0 0 0 0 1 1]\n [2 2 1 2 1 0 0 1 0 1 0 0 0 0 0 0 1 1]\n [2 1 3 1 1 0 0 1 0 1 0 0 0 0 0 0 1 1]\n [2 1 2 3 0 0 0 1 0 1 0 0 0 0 0 0 1 1]\n [2 1 2 2 1 0 1 0 0 1 0 0 0 0 0 0 1 1]\n [2 1 2 2 1 0 0 1 1 0 0 0 0 0 0 0 1 1]\n [2 1 2 2 1 0 0 1 0 1 0 0 0 0 0 1 0 1]\n [2 1 2 2 1 0 0 1 0 1 0 0 0 0 0 0 2 0]\n [4 1 1 2 1 0 0 1 0 1 0 0 0 0 0 0 1 0]\n [4 0 3 1 1 0 0 1 0 1 0 0 0 0 0 0 1 0]\n [4 0 2 3 0 0 0 1 0 1 0 0 0 0 0 0 1 0]\n [4 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 1 0]\n [4 0 2 2 1 0 0 1 1 0 0 0 0 0 0 0 1 0]\n [4 0 2 2 1 0 0 1 0 1 0 0 0 0 0 1 0 0]\n [3 2 2 1 1 0 0 1 0 1 0 0 0 0 0 0 1 0]\n [3 2 1 3 0 0 0 1 0 1 0 0 0 0 0 0 1 0]\n [3 2 1 2 1 0 1 0 0 1 0 0 0 0 0 0 1 0]\n [3 2 1 2 1 0 0 1 1 0 0 0 0 0 0 0 1 0]\n [3 2 1 2 1 0 0 1 0 1 0 0 0 0 0 1 0 0]\n [3 1 3 2 0 0 0 1 0 1 0 0 0 0 0 0 1 0]\n [3 1 3 1 1 0 1 0 0 1 0 0 0 0 0 0 1 0]\n [3 1 3 1 1 0 0 1 1 0 0 0 0 0 0 0 1 0]\n [3 1 3 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0]\n [3 1 2 3 0 0 1 0 0 1 0 0 0 0 0 0 1 0]\n [3 1 2 3 0 0 0 1 1 0 0 0 0 0 0 0 1 0]\n [3 1 2 3 0 0 0 1 0 1 0 0 0 0 0 1 0 0]\n [3 1 2 2 1 1 0 0 0 1 0 0 0 0 0 0 1 0]\n [3 1 2 2 1 0 1 0 1 0 0 0 0 0 0 0 1 0]\n [3 1 2 2 1 0 1 0 0 1 0 0 0 0 0 1 0 0]\n [3 1 2 2 1 0 0 2 0 0 0 0 0 0 0 0 1 0]\n [3 1 2 2 1 0 0 1 1 0 0 0 0 0 0 1 0 0]\n [3 1 2 2 1 0 0 1 0 1 0 0 0 0 1 0 0 0]]\n\n\n\n\n3.5.6 Local search algorithm\n\ndef local_search_predicted(x, v_star, regressor, size=2):\n    # Initialize the best solution found so far 'x_star' to the input vector 'x'\n    x_star = np.array(x).flatten()  # Keep as 1D array\n\n    # Initialize the best cost found so far 'C_star' to the cost of the input vector 'x'\n    x_star_dmatrix = xgb.DMatrix(x_star.reshape(1, -1))\n    c_star = regressor.predict(x_star_dmatrix)[0]\n\n    # Set the value of 'T' to the length of the input vector 'x'\n    T = len(x_star)\n\n    # Loop over all possible values of 't'\n    for t in range(1, size):\n        print(f'Running local search {t}')\n\n        # Generate the neighborhood of the current best solution 'x_star' with 't' patients switched\n        ids = powerset(range(T), t)\n        neighborhood = get_neighborhood(x_star, v_star, ids)\n        print(f\"Switching {t} patient(s). Size of neighborhood: {len(ids)}\")\n        \n        for neighbor in neighborhood:\n            neighbor_dmatrix = xgb.DMatrix(neighbor.reshape(1, -1))\n            cost = regressor.predict(neighbor_dmatrix)\n            if cost &lt; c_star:\n                x_star = neighbor\n                c_star = cost\n                result = [int(x) for x in x_star] # Convert x_star to list of integers\n                objectives = calculate_objective(result, s, d, q)\n                objective_value = w * objectives[0] + (1 - w) * objectives[1]\n                print(f\"Found better solution: {x_star}, pred_cost: {c_star}, real_cost: {objective_value}\")\n\n    # Return the best solution found 'x_star' as 1D array\n    return x_star, c_star, objective_value\n\n\ndef local_search(x, v_star, size=2):\n    # Initialize the best solution found so far 'x_star' to the input vector 'x'\n    x_star = np.array(x).flatten()  # Keep as 1D array\n\n    # Calculate initial objectives and cost\n    objectives_star = calculate_objective(x_star, s, d, q)\n    c_star = w * objectives_star[0] + (1 - w) * objectives_star[1]\n\n    # Set the value of 'T' to the length of the input vector 'x'\n    T = len(x_star)\n\n    # Loop over all possible values of 't'\n    for t in range(1, size):\n        print(f'Running local search {t}')\n\n        # Generate the neighborhood of the current best solution 'x_star' with 't' patients switched\n        ids = powerset(range(T), t)\n        neighborhood = get_neighborhood(x_star, v_star, ids)\n        print(f\"Switching {t} patient(s). Size of neighborhood: {len(ids)}\")\n\n        for neighbor in neighborhood:\n            # Calculate objectives for the neighbor\n            objectives = calculate_objective(neighbor, s, d, q)\n            cost = w * objectives[0] + (1 - w) * objectives[1]\n\n            # Compare scalar costs\n            if cost &lt; c_star:\n                x_star = neighbor\n                c_star = cost\n                print(f\"Found better solution: {x_star}, cost: {c_star}\")\n\n    # Return the best solution found 'x_star' and its cost\n    return x_star, c_star\n\n\n\n3.5.7 Run the local search algorithm\n\n# Example of using the local search algorithm with a random vector 'x' and a regressor model\n# Load regressor model\nregressor = xgb.Booster()\nregressor.load_model(\"models/regressor.json\")\n\ntest = local_search_predicted(initial_schedule, v_star, regressor, T)\nprint(test)\nprint(f\"Best solution found: {test[0]}, with predicted cost: {test[1]} and real cost: {test[2]}\")\n\nRunning local search 1\nSwitching 1 patient(s). Size of neighborhood: 18\nFound better solution: [2 1 2 2 1 0 0 1 0 1 0 0 0 0 0 0 1 1], pred_cost: [6.866628], real_cost: 6.883515058933364\nRunning local search 2\nSwitching 2 patient(s). Size of neighborhood: 153\nFound better solution: [2 0 2 2 1 0 0 1 0 1 0 0 0 0 0 0 1 2], pred_cost: [6.0458527], real_cost: 7.963012165632001\nFound better solution: [1 1 2 2 1 0 0 1 0 1 0 0 0 0 0 0 2 1], pred_cost: [5.4767694], real_cost: 6.656923205632005\nRunning local search 3\nSwitching 3 patient(s). Size of neighborhood: 816\nFound better solution: [1 1 1 2 1 0 0 1 0 1 0 0 0 0 0 0 2 2], pred_cost: [4.789194], real_cost: 6.186993041408005\nFound better solution: [0 1 2 2 1 1 0 0 0 1 0 0 0 0 0 0 2 2], pred_cost: [4.5829315], real_cost: 8.944398467727368\nFound better solution: [0 1 2 2 1 0 0 1 1 0 0 0 0 0 0 1 1 2], pred_cost: [3.8392844], real_cost: 6.343812165632004\nRunning local search 4\nSwitching 4 patient(s). Size of neighborhood: 3060\nFound better solution: [0 1 1 2 1 0 0 1 1 0 0 0 0 0 0 1 2 2], pred_cost: [3.3210394], real_cost: 6.186993041408005\nFound better solution: [0 1 2 2 1 0 1 1 0 0 0 0 0 0 1 0 2 1], pred_cost: [3.3092134], real_cost: 6.658841605570565\nRunning local search 5\nSwitching 5 patient(s). Size of neighborhood: 8568\nFound better solution: [0 1 1 2 1 0 2 0 0 0 0 0 0 1 0 0 2 2], pred_cost: [3.104191], real_cost: 7.806193041408007\nFound better solution: [0 1 1 2 1 0 1 1 0 0 0 0 0 0 1 1 2 1], pred_cost: [2.8356414], real_cost: 4.042711040000003\nFound better solution: [1 0 2 2 1 0 2 0 0 0 0 1 0 0 0 0 2 1], pred_cost: [2.3569963], real_cost: 8.279509123072007\nRunning local search 6\nSwitching 6 patient(s). Size of neighborhood: 18564\nFound better solution: [1 0 1 2 1 0 2 0 0 0 0 1 0 1 0 0 1 2], pred_cost: [2.302895], real_cost: 5.348800000000004\nFound better solution: [1 0 1 2 1 0 2 0 0 0 0 1 0 0 1 0 2 1], pred_cost: [1.7315665], real_cost: 5.661911040000006\nFound better solution: [0 1 1 2 1 0 2 0 0 0 0 1 0 1 0 0 2 1], pred_cost: [1.2410283], real_cost: 5.661911040000006\nRunning local search 7\nSwitching 7 patient(s). Size of neighborhood: 31824\nFound better solution: [0 1 1 2 1 1 1 1 0 0 0 1 0 0 0 0 2 1], pred_cost: [1.1901934], real_cost: 4.129737195520003\nRunning local search 8\nSwitching 8 patient(s). Size of neighborhood: 43758\nFound better solution: [0 1 1 1 1 1 1 1 0 0 1 0 0 0 1 0 2 1], pred_cost: [0.96885973], real_cost: 2.030551040000001\nFound better solution: [1 1 1 1 1 1 1 1 0 1 0 0 0 0 1 0 2 0], pred_cost: [0.87961173], real_cost: 1.6192000000000009\nFound better solution: [0 1 1 2 1 1 2 1 0 0 0 0 0 0 1 0 2 0], pred_cost: [0.7119973], real_cost: 5.746358980286878\nFound better solution: [0 1 1 2 1 1 1 1 0 1 0 1 0 0 0 0 2 0], pred_cost: [0.39935952], real_cost: 3.718386155520003\nRunning local search 9\nSwitching 9 patient(s). Size of neighborhood: 48620\nFound better solution: [0 1 1 2 0 1 1 1 0 1 0 1 0 1 0 0 2 0], pred_cost: [-0.09283682], real_cost: 3.238400000000003\nFound better solution: [0 1 1 1 1 1 2 0 1 0 0 1 0 0 1 0 2 0], pred_cost: [-0.37259385], real_cost: 3.238400000000003\nRunning local search 10\nSwitching 10 patient(s). Size of neighborhood: 43758\nRunning local search 11\nSwitching 11 patient(s). Size of neighborhood: 31824\nRunning local search 12\nSwitching 12 patient(s). Size of neighborhood: 18564\nRunning local search 13\nSwitching 13 patient(s). Size of neighborhood: 8568\nRunning local search 14\nSwitching 14 patient(s). Size of neighborhood: 3060\nRunning local search 15\nSwitching 15 patient(s). Size of neighborhood: 816\nRunning local search 16\nSwitching 16 patient(s). Size of neighborhood: 153\nRunning local search 17\nSwitching 17 patient(s). Size of neighborhood: 18\n(array([0, 1, 1, 1, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 2, 0]), array([-0.37259385], dtype=float32), 3.238400000000003)\nBest solution found: [0 1 1 1 1 1 2 0 1 0 0 1 0 0 1 0 2 0], with predicted cost: [-0.37259385] and real cost: 3.238400000000003\n\n\n\n# Computing optimun solution with real cost\nprint(f\"Initial schedule: {test[0]}\")\ntest = local_search(test[0], v_star, T)\nprint(test)\nprint(f\"Best solution found: {test[0]}, with cost: {test[1]}\")\n\nInitial schedule: [0 1 1 1 1 1 2 0 1 0 0 1 0 0 1 0 2 0]\nRunning local search 1\nSwitching 1 patient(s). Size of neighborhood: 18\nFound better solution: [0 1 1 1 1 1 2 0 1 0 0 1 0 0 1 1 1 0], cost: 1.6192000000000009\nRunning local search 2\nSwitching 2 patient(s). Size of neighborhood: 153\nRunning local search 3\nSwitching 3 patient(s). Size of neighborhood: 816\nRunning local search 4\nSwitching 4 patient(s). Size of neighborhood: 3060\nRunning local search 5\nSwitching 5 patient(s). Size of neighborhood: 8568\nRunning local search 6\nSwitching 6 patient(s). Size of neighborhood: 18564\nFound better solution: [1 1 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0], cost: 0.0\nRunning local search 7\nSwitching 7 patient(s). Size of neighborhood: 31824\nRunning local search 8\nSwitching 8 patient(s). Size of neighborhood: 43758\nRunning local search 9\nSwitching 9 patient(s). Size of neighborhood: 48620\nRunning local search 10\nSwitching 10 patient(s). Size of neighborhood: 43758\nRunning local search 11\nSwitching 11 patient(s). Size of neighborhood: 31824\nRunning local search 12\nSwitching 12 patient(s). Size of neighborhood: 18564\nRunning local search 13\nSwitching 13 patient(s). Size of neighborhood: 8568\nRunning local search 14\nSwitching 14 patient(s). Size of neighborhood: 3060\nRunning local search 15\nSwitching 15 patient(s). Size of neighborhood: 816\nRunning local search 16\nSwitching 16 patient(s). Size of neighborhood: 153\nRunning local search 17\nSwitching 17 patient(s). Size of neighborhood: 18\n(array([1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0]), 0.0)\nBest solution found: [1 1 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0], with cost: 0.0",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Local search with trained XGBoost regressor model</span>"
    ]
  },
  {
    "objectID": "local-search-regressor.html#discussion",
    "href": "local-search-regressor.html#discussion",
    "title": "3  Local search with trained XGBoost regressor model",
    "section": "3.6 Discussion",
    "text": "3.6 Discussion\nAnalyze your results in this section. Discuss whether your hypothesis was supported, what the results mean, and the implications for future work. Address any anomalies or unexpected findings, and consider the broader impact of your results.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Local search with trained XGBoost regressor model</span>"
    ]
  },
  {
    "objectID": "local-search-regressor.html#timeline",
    "href": "local-search-regressor.html#timeline",
    "title": "3  Local search with trained XGBoost regressor model",
    "section": "3.7 Timeline",
    "text": "3.7 Timeline\nDocument the duration and key dates of the experiment. This helps in project management and reproducibility.",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Local search with trained XGBoost regressor model</span>"
    ]
  },
  {
    "objectID": "local-search-regressor.html#references",
    "href": "local-search-regressor.html#references",
    "title": "3  Local search with trained XGBoost regressor model",
    "section": "3.8 References",
    "text": "3.8 References\nCite all sources that informed your experiment, including research papers, datasets, and tools. This section ensures that your work is properly grounded in existing research and that others can trace the origins of your methods and data.s",
    "crumbs": [
      "Surrogate models for schedule evaluation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Local search with trained XGBoost regressor model</span>"
    ]
  }
]